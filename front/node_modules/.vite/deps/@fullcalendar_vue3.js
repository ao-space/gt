import "./chunk-RTAZJG5S.js";
import {
  createApp,
  defineComponent,
  h
} from "./chunk-7QBH72LR.js";
import "./chunk-3HNM57CK.js";
import {
  BASE_OPTION_DEFAULTS,
  BASE_OPTION_REFINERS,
  BaseComponent,
  BgEvent,
  CalendarApi,
  CalendarContent,
  CalendarDataManager,
  CalendarDataProvider,
  CalendarRoot,
  Component,
  ContentHook,
  CustomContentRenderContext,
  DateComponent,
  DateEnv,
  DateProfileGenerator,
  DayCellContent,
  DayCellRoot,
  DayHeader,
  DaySeriesModel,
  DayTableModel,
  DelayedRunner,
  ElementDragging,
  ElementScrollController,
  Emitter,
  EventApi,
  EventRoot,
  EventSourceApi,
  Fragment,
  Interaction,
  MoreLinkRoot,
  MountHook,
  NamedTimeZoneImpl,
  NowIndicatorRoot,
  NowTimer,
  PositionCache,
  RefMap,
  RenderHook,
  ScrollController,
  ScrollResponder,
  Scroller,
  SegHierarchy,
  SimpleScrollGrid,
  Slicer,
  Splitter,
  StandardEvent,
  TableDateCell,
  TableDowCell,
  Theme,
  ViewApi,
  ViewContextType,
  ViewRoot,
  WeekNumberRoot,
  WindowScrollController,
  addDays,
  addDurations,
  addMs,
  addWeeks,
  allowContextMenu,
  allowSelection,
  applyMutationToEventStore,
  applyStyle,
  applyStyleProp,
  asCleanDays,
  asRoughMinutes,
  asRoughMs,
  asRoughSeconds,
  binarySearch,
  buildClassNameNormalizer,
  buildEntryKey,
  buildEventApis,
  buildEventRangeKey,
  buildHashFromArray,
  buildIsoString,
  buildNavLinkAttrs,
  buildSegCompareObj,
  buildSegTimeText,
  collectFromHash,
  combineEventUis,
  compareByFieldSpec,
  compareByFieldSpecs,
  compareNumbers,
  compareObjs,
  computeEarliestSegStart,
  computeEdges,
  computeFallbackHeaderFormat,
  computeHeightAndMargins,
  computeInnerRect,
  computeRect,
  computeSegDraggable,
  computeSegEndResizable,
  computeSegStartResizable,
  computeShrinkWidth,
  computeSmallestCellWidth,
  computeVisibleDayRange,
  config,
  constrainPoint,
  createAriaClickAttrs,
  createContext,
  createDuration,
  createElement,
  createEmptyEventStore,
  createEventInstance,
  createEventUi,
  createFormatter,
  createPlugin,
  createPortal,
  createRef,
  diffDates,
  diffDayAndTime,
  diffDays,
  diffPoints,
  diffWeeks,
  diffWholeDays,
  diffWholeWeeks,
  disableCursor,
  elementClosest,
  elementMatches,
  enableCursor,
  eventTupleToStore,
  filterEventStoreDefs,
  filterHash,
  findDirectChildren,
  findElements,
  flexibleCompare,
  flushSync,
  formatDate,
  formatDayString,
  formatIsoTimeString,
  formatRange,
  getAllowYScrolling,
  getCanVGrowWithinCell,
  getClippingParents,
  getDateMeta,
  getDayClassNames,
  getDefaultEventEnd,
  getElRoot,
  getElSeg,
  getEntrySpanEnd,
  getEventClassNames,
  getEventTargetViaRoot,
  getIsRtlScrollbarOnLeft,
  getRectCenter,
  getRelevantEvents,
  getScrollGridClassNames,
  getScrollbarWidths,
  getSectionClassNames,
  getSectionHasLiquidHeight,
  getSegAnchorAttrs,
  getSegMeta,
  getSlotClassNames,
  getStickyFooterScrollbar,
  getStickyHeaderDates,
  getUnequalProps,
  getUniqueDomId,
  globalLocales,
  globalPlugins,
  greatestDurationDenominator,
  groupIntersectingEntries,
  guid,
  hasBgRendering,
  hasShrinkWidth,
  identity,
  interactionSettingsStore,
  interactionSettingsToStore,
  intersectRanges,
  intersectRects,
  intersectSpans,
  isArraysEqual,
  isColPropsEqual,
  isDateSelectionValid,
  isDateSpansEqual,
  isInt,
  isInteractionValid,
  isMultiDayRange,
  isPropsEqual,
  isPropsValid,
  isValidDate,
  joinSpans,
  listenBySelector,
  mapHash,
  memoize,
  memoizeArraylike,
  memoizeHashlike,
  memoizeObjArg,
  mergeEventStores,
  multiplyDuration,
  padStart,
  parse,
  parseBusinessHours,
  parseClassNames,
  parseDragMeta,
  parseEventDef,
  parseFieldSpecs,
  pointInsideRect,
  preventContextMenu,
  preventDefault,
  preventSelection,
  rangeContainsMarker,
  rangeContainsRange,
  rangesEqual,
  rangesIntersect,
  refineEventDef,
  refineProps,
  removeElement,
  removeExact,
  render,
  renderChunkContent,
  renderFill,
  renderMicroColGroup,
  renderScrollShim,
  requestJson,
  sanitizeShrinkWidth,
  setElSeg,
  setRef,
  sliceEventStore,
  sliceEvents,
  sortEventSegs,
  startOfDay,
  translateRect,
  triggerDateSelect,
  unmountComponentAtNode,
  unpromisify,
  version,
  whenTransitionDone,
  wholeDivideDurations
} from "./chunk-SI5S43G7.js";
import {
  __assign,
  __extends
} from "./chunk-EXAMLBMZ.js";
import "./chunk-TFWDKVI3.js";

// node_modules/@fullcalendar/core/main.js
var Calendar = (
  /** @class */
  function(_super) {
    __extends(Calendar2, _super);
    function Calendar2(el, optionOverrides) {
      if (optionOverrides === void 0) {
        optionOverrides = {};
      }
      var _this = _super.call(this) || this;
      _this.isRendering = false;
      _this.isRendered = false;
      _this.currentClassNames = [];
      _this.customContentRenderId = 0;
      _this.handleAction = function(action) {
        switch (action.type) {
          case "SET_EVENT_DRAG":
          case "SET_EVENT_RESIZE":
            _this.renderRunner.tryDrain();
        }
      };
      _this.handleData = function(data) {
        _this.currentData = data;
        _this.renderRunner.request(data.calendarOptions.rerenderDelay);
      };
      _this.handleRenderRequest = function() {
        if (_this.isRendering) {
          _this.isRendered = true;
          var currentData_1 = _this.currentData;
          flushSync(function() {
            render(createElement(CalendarRoot, { options: currentData_1.calendarOptions, theme: currentData_1.theme, emitter: currentData_1.emitter }, function(classNames, height, isHeightAuto, forPrint) {
              _this.setClassNames(classNames);
              _this.setHeight(height);
              return createElement(
                CustomContentRenderContext.Provider,
                { value: _this.customContentRenderId },
                createElement(CalendarContent, __assign({ isHeightAuto, forPrint }, currentData_1))
              );
            }), _this.el);
          });
        } else if (_this.isRendered) {
          _this.isRendered = false;
          unmountComponentAtNode(_this.el);
          _this.setClassNames([]);
          _this.setHeight("");
        }
      };
      _this.el = el;
      _this.renderRunner = new DelayedRunner(_this.handleRenderRequest);
      new CalendarDataManager({
        optionOverrides,
        calendarApi: _this,
        onAction: _this.handleAction,
        onData: _this.handleData
      });
      return _this;
    }
    Object.defineProperty(Calendar2.prototype, "view", {
      get: function() {
        return this.currentData.viewApi;
      },
      enumerable: false,
      configurable: true
    });
    Calendar2.prototype.render = function() {
      var wasRendering = this.isRendering;
      if (!wasRendering) {
        this.isRendering = true;
      } else {
        this.customContentRenderId += 1;
      }
      this.renderRunner.request();
      if (wasRendering) {
        this.updateSize();
      }
    };
    Calendar2.prototype.destroy = function() {
      if (this.isRendering) {
        this.isRendering = false;
        this.renderRunner.request();
      }
    };
    Calendar2.prototype.updateSize = function() {
      var _this = this;
      flushSync(function() {
        _super.prototype.updateSize.call(_this);
      });
    };
    Calendar2.prototype.batchRendering = function(func) {
      this.renderRunner.pause("batchRendering");
      func();
      this.renderRunner.resume("batchRendering");
    };
    Calendar2.prototype.pauseRendering = function() {
      this.renderRunner.pause("pauseRendering");
    };
    Calendar2.prototype.resumeRendering = function() {
      this.renderRunner.resume("pauseRendering", true);
    };
    Calendar2.prototype.resetOptions = function(optionOverrides, append) {
      this.currentDataManager.resetOptions(optionOverrides, append);
    };
    Calendar2.prototype.setClassNames = function(classNames) {
      if (!isArraysEqual(classNames, this.currentClassNames)) {
        var classList = this.el.classList;
        for (var _i = 0, _a = this.currentClassNames; _i < _a.length; _i++) {
          var className = _a[_i];
          classList.remove(className);
        }
        for (var _b = 0, classNames_1 = classNames; _b < classNames_1.length; _b++) {
          var className = classNames_1[_b];
          classList.add(className);
        }
        this.currentClassNames = classNames;
      }
    };
    Calendar2.prototype.setHeight = function(height) {
      applyStyleProp(this.el, "height", height);
    };
    return Calendar2;
  }(CalendarApi)
);

// node_modules/@fullcalendar/vue3/dist/options.js
var OPTION_IS_COMPLEX = {
  headerToolbar: true,
  footerToolbar: true,
  events: true,
  eventSources: true,
  resources: true
};

// node_modules/@fullcalendar/vue3/dist/utils.js
function shallowCopy(val) {
  if (typeof val === "object") {
    if (Array.isArray(val)) {
      val = Array.prototype.slice.call(val);
    } else if (val) {
      val = { ...val };
    }
  }
  return val;
}
function mapHash2(input, func) {
  const output = {};
  for (const key in input) {
    if (input.hasOwnProperty(key)) {
      output[key] = func(input[key], key);
    }
  }
  return output;
}

// node_modules/@fullcalendar/vue3/dist/custom-content-type.js
function wrapVDomGenerator(vDomGenerator) {
  return function(props) {
    return { vue: vDomGenerator(props) };
  };
}
function createVueContentTypePlugin(appContext) {
  return createPlugin({
    contentTypeHandlers: {
      vue: () => buildVDomHandler(appContext)
      // looks for the `vue` key
    }
  });
}
function buildVDomHandler(appContext) {
  let currentEl;
  let app;
  let componentInstance;
  function render2(el, vDomContent) {
    if (currentEl !== el) {
      if (currentEl && app) {
        app.unmount();
      }
      currentEl = el;
    }
    if (!app) {
      app = initApp(vDomContent, appContext);
      let innerEl = document.createElement("span");
      el.appendChild(innerEl);
      componentInstance = app.mount(innerEl);
    } else {
      componentInstance.content = vDomContent;
    }
  }
  function destroy() {
    if (app) {
      app.unmount();
    }
  }
  return { render: render2, destroy };
}
function initApp(initialContent, appContext) {
  return createApp({
    data() {
      return {
        content: initialContent
      };
    },
    render() {
      let { content } = this;
      if (content.length === 1) {
        return content[0];
      } else {
        return h("span", {}, content);
      }
    }
  });
}

// node_modules/@fullcalendar/vue3/dist/FullCalendar.js
var FullCalendar = defineComponent({
  props: {
    options: Object
  },
  data: initData,
  render() {
    return h("div", {
      // when renderId is changed, Vue will trigger a real-DOM async rerender, calling beforeUpdate/updated
      attrs: { "data-fc-render-id": this.renderId }
    });
  },
  mounted() {
    this.slotOptions = mapHash2(this.$slots, wrapVDomGenerator);
    let calendarOptions = this.buildOptions(this.options, this.$.appContext);
    let calendar = new Calendar(this.$el, calendarOptions);
    this.calendar = calendar;
    calendar.render();
  },
  methods: {
    getApi,
    buildOptions
  },
  beforeUpdate() {
    this.getApi().resumeRendering();
  },
  beforeUnmount() {
    this.getApi().destroy();
  },
  watch: buildWatchers()
});
var FullCalendar_default = FullCalendar;
function initData() {
  return {
    renderId: 0
  };
}
function buildOptions(suppliedOptions, appContext) {
  suppliedOptions = suppliedOptions || {};
  return {
    ...this.slotOptions,
    ...suppliedOptions,
    plugins: (suppliedOptions.plugins || []).concat([
      createVueContentTypePlugin(appContext)
    ])
  };
}
function getApi() {
  return this.calendar;
}
function buildWatchers() {
  let watchers = {
    // watches changes of ALL options and their nested objects,
    // but this is only a means to be notified of top-level non-complex options changes.
    options: {
      deep: true,
      handler(options) {
        let calendar = this.getApi();
        calendar.pauseRendering();
        let calendarOptions = this.buildOptions(options, this.$.appContext);
        calendar.resetOptions(calendarOptions);
        this.renderId++;
      }
    }
  };
  for (let complexOptionName in OPTION_IS_COMPLEX) {
    watchers[`options.${complexOptionName}`] = {
      deep: true,
      handler(val) {
        if (val !== void 0) {
          let calendar = this.getApi();
          calendar.pauseRendering();
          calendar.resetOptions({
            // the only reason we shallow-copy is to trick FC into knowing there's a nested change.
            // TODO: future versions of FC will more gracefully handle event option-changes that are same-reference.
            [complexOptionName]: shallowCopy(val)
          }, true);
          this.renderId++;
        }
      }
    };
  }
  return watchers;
}

// node_modules/@fullcalendar/vue3/dist/main.js
var main_default = FullCalendar_default;
export {
  BASE_OPTION_DEFAULTS,
  BASE_OPTION_REFINERS,
  BaseComponent,
  BgEvent,
  Calendar,
  CalendarApi,
  CalendarContent,
  CalendarDataManager,
  CalendarDataProvider,
  CalendarRoot,
  Component,
  ContentHook,
  CustomContentRenderContext,
  DateComponent,
  DateEnv,
  DateProfileGenerator,
  DayCellContent,
  DayCellRoot,
  DayHeader,
  DaySeriesModel,
  DayTableModel,
  DelayedRunner,
  ElementDragging,
  ElementScrollController,
  Emitter,
  EventApi,
  EventRoot,
  EventSourceApi,
  Fragment,
  Interaction,
  MoreLinkRoot,
  MountHook,
  NamedTimeZoneImpl,
  NowIndicatorRoot,
  NowTimer,
  PositionCache,
  RefMap,
  RenderHook,
  ScrollController,
  ScrollResponder,
  Scroller,
  SegHierarchy,
  SimpleScrollGrid,
  Slicer,
  Splitter,
  StandardEvent,
  TableDateCell,
  TableDowCell,
  Theme,
  ViewApi,
  ViewContextType,
  ViewRoot,
  WeekNumberRoot,
  WindowScrollController,
  addDays,
  addDurations,
  addMs,
  addWeeks,
  allowContextMenu,
  allowSelection,
  applyMutationToEventStore,
  applyStyle,
  applyStyleProp,
  asCleanDays,
  asRoughMinutes,
  asRoughMs,
  asRoughSeconds,
  binarySearch,
  buildClassNameNormalizer,
  buildEntryKey,
  buildEventApis,
  buildEventRangeKey,
  buildHashFromArray,
  buildIsoString,
  buildNavLinkAttrs,
  buildSegCompareObj,
  buildSegTimeText,
  collectFromHash,
  combineEventUis,
  compareByFieldSpec,
  compareByFieldSpecs,
  compareNumbers,
  compareObjs,
  computeEarliestSegStart,
  computeEdges,
  computeFallbackHeaderFormat,
  computeHeightAndMargins,
  computeInnerRect,
  computeRect,
  computeSegDraggable,
  computeSegEndResizable,
  computeSegStartResizable,
  computeShrinkWidth,
  computeSmallestCellWidth,
  computeVisibleDayRange,
  config,
  constrainPoint,
  createAriaClickAttrs,
  createContext,
  createDuration,
  createElement,
  createEmptyEventStore,
  createEventInstance,
  createEventUi,
  createFormatter,
  createPlugin,
  createPortal,
  createRef,
  main_default as default,
  diffDates,
  diffDayAndTime,
  diffDays,
  diffPoints,
  diffWeeks,
  diffWholeDays,
  diffWholeWeeks,
  disableCursor,
  elementClosest,
  elementMatches,
  enableCursor,
  eventTupleToStore,
  filterEventStoreDefs,
  filterHash,
  findDirectChildren,
  findElements,
  flexibleCompare,
  flushSync,
  formatDate,
  formatDayString,
  formatIsoTimeString,
  formatRange,
  getAllowYScrolling,
  getCanVGrowWithinCell,
  getClippingParents,
  getDateMeta,
  getDayClassNames,
  getDefaultEventEnd,
  getElRoot,
  getElSeg,
  getEntrySpanEnd,
  getEventClassNames,
  getEventTargetViaRoot,
  getIsRtlScrollbarOnLeft,
  getRectCenter,
  getRelevantEvents,
  getScrollGridClassNames,
  getScrollbarWidths,
  getSectionClassNames,
  getSectionHasLiquidHeight,
  getSegAnchorAttrs,
  getSegMeta,
  getSlotClassNames,
  getStickyFooterScrollbar,
  getStickyHeaderDates,
  getUnequalProps,
  getUniqueDomId,
  globalLocales,
  globalPlugins,
  greatestDurationDenominator,
  groupIntersectingEntries,
  guid,
  hasBgRendering,
  hasShrinkWidth,
  identity,
  interactionSettingsStore,
  interactionSettingsToStore,
  intersectRanges,
  intersectRects,
  intersectSpans,
  isArraysEqual,
  isColPropsEqual,
  isDateSelectionValid,
  isDateSpansEqual,
  isInt,
  isInteractionValid,
  isMultiDayRange,
  isPropsEqual,
  isPropsValid,
  isValidDate,
  joinSpans,
  listenBySelector,
  mapHash,
  memoize,
  memoizeArraylike,
  memoizeHashlike,
  memoizeObjArg,
  mergeEventStores,
  multiplyDuration,
  padStart,
  parseBusinessHours,
  parseClassNames,
  parseDragMeta,
  parseEventDef,
  parseFieldSpecs,
  parse as parseMarker,
  pointInsideRect,
  preventContextMenu,
  preventDefault,
  preventSelection,
  rangeContainsMarker,
  rangeContainsRange,
  rangesEqual,
  rangesIntersect,
  refineEventDef,
  refineProps,
  removeElement,
  removeExact,
  render,
  renderChunkContent,
  renderFill,
  renderMicroColGroup,
  renderScrollShim,
  requestJson,
  sanitizeShrinkWidth,
  setElSeg,
  setRef,
  sliceEventStore,
  sliceEvents,
  sortEventSegs,
  startOfDay,
  translateRect,
  triggerDateSelect,
  unmountComponentAtNode,
  unpromisify,
  version,
  whenTransitionDone,
  wholeDivideDurations
};
/*! Bundled license information:

@fullcalendar/core/main.js:
  (*!
  FullCalendar v5.11.5
  Docs & License: https://fullcalendar.io/
  (c) 2022 Adam Shaw
  *)
*/
//# sourceMappingURL=@fullcalendar_vue3.js.map
