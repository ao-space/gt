{
  "version": 3,
  "sources": ["../../@fullcalendar/timegrid/src/AllDaySplitter.ts", "../../@fullcalendar/timegrid/src/TimeColsAxisCell.tsx", "../../@fullcalendar/timegrid/src/TimeBodyAxis.tsx", "../../@fullcalendar/timegrid/src/TimeColsView.tsx", "../../@fullcalendar/timegrid/src/TimeColsSlatsCoords.ts", "../../@fullcalendar/timegrid/src/TimeColsSlatsBody.tsx", "../../@fullcalendar/timegrid/src/TimeColsSlats.tsx", "../../@fullcalendar/timegrid/src/TimeColsSeg.ts", "../../@fullcalendar/timegrid/src/TimeColMoreLink.tsx", "../../@fullcalendar/timegrid/src/seg-web.ts", "../../@fullcalendar/timegrid/src/event-placement.ts", "../../@fullcalendar/timegrid/src/TimeColEvent.tsx", "../../@fullcalendar/timegrid/src/TimeColMisc.tsx", "../../@fullcalendar/timegrid/src/TimeCol.tsx", "../../@fullcalendar/timegrid/src/TimeColsContent.tsx", "../../@fullcalendar/timegrid/src/TimeCols.tsx", "../../@fullcalendar/timegrid/src/DayTimeColsSlicer.ts", "../../@fullcalendar/timegrid/src/DayTimeCols.tsx", "../../@fullcalendar/timegrid/src/time-slat-meta.ts", "../../@fullcalendar/timegrid/src/DayTimeColsView.tsx", "../../@fullcalendar/timegrid/src/options.ts", "../../@fullcalendar/timegrid/src/main.ts"],
  "sourcesContent": ["import {\n  Splitter,\n  hasBgRendering,\n  EventDef,\n  DateSpan,\n} from '@fullcalendar/common'\n\nexport class AllDaySplitter extends Splitter {\n  getKeyInfo() {\n    return {\n      allDay: {},\n      timed: {},\n    }\n  }\n\n  getKeysForDateSpan(dateSpan: DateSpan): string[] {\n    if (dateSpan.allDay) {\n      return ['allDay']\n    }\n\n    return ['timed']\n  }\n\n  getKeysForEventDef(eventDef: EventDef): string[] {\n    if (!eventDef.allDay) {\n      return ['timed']\n    }\n\n    if (hasBgRendering(eventDef)) {\n      return ['timed', 'allDay']\n    }\n\n    return ['allDay']\n  }\n}\n", "import {\n  createElement,\n  ViewContext,\n  createFormatter,\n  ViewContextType,\n  RenderHook,\n  SlotLabelContentArg,\n} from '@fullcalendar/common'\nimport { TimeSlatMeta } from './time-slat-meta'\n\nconst DEFAULT_SLAT_LABEL_FORMAT = createFormatter({\n  hour: 'numeric',\n  minute: '2-digit',\n  omitZeroMinute: true,\n  meridiem: 'short',\n})\n\nexport function TimeColsAxisCell(props: TimeSlatMeta) {\n  let classNames = [\n    'fc-timegrid-slot',\n    'fc-timegrid-slot-label',\n    props.isLabeled ? 'fc-scrollgrid-shrink' : 'fc-timegrid-slot-minor',\n  ]\n\n  return (\n    <ViewContextType.Consumer>\n      {(context: ViewContext) => {\n        if (!props.isLabeled) {\n          return (\n            <td className={classNames.join(' ')} data-time={props.isoTimeStr} />\n          )\n        }\n\n        let { dateEnv, options, viewApi } = context\n        let labelFormat = // TODO: fully pre-parse\n          options.slotLabelFormat == null ? DEFAULT_SLAT_LABEL_FORMAT :\n            Array.isArray(options.slotLabelFormat) ? createFormatter(options.slotLabelFormat[0]) :\n              createFormatter(options.slotLabelFormat)\n\n        let hookProps: SlotLabelContentArg = {\n          level: 0,\n          time: props.time,\n          date: dateEnv.toDate(props.date),\n          view: viewApi,\n          text: dateEnv.format(props.date, labelFormat),\n        }\n\n        return (\n          <RenderHook<SlotLabelContentArg> // needed?\n            hookProps={hookProps}\n            classNames={options.slotLabelClassNames}\n            content={options.slotLabelContent}\n            defaultContent={renderInnerContent}\n            didMount={options.slotLabelDidMount}\n            willUnmount={options.slotLabelWillUnmount}\n          >\n            {(rootElRef, customClassNames, innerElRef, innerContent) => (\n              <td ref={rootElRef} className={classNames.concat(customClassNames).join(' ')} data-time={props.isoTimeStr}>\n                <div className=\"fc-timegrid-slot-label-frame fc-scrollgrid-shrink-frame\">\n                  <div className=\"fc-timegrid-slot-label-cushion fc-scrollgrid-shrink-cushion\" ref={innerElRef}>\n                    {innerContent}\n                  </div>\n                </div>\n              </td>\n            )}\n          </RenderHook>\n        )\n      }}\n    </ViewContextType.Consumer>\n  )\n}\n\nfunction renderInnerContent(props) { // TODO: add types\n  return props.text\n}\n", "import { createElement, BaseComponent } from '@fullcalendar/common'\nimport { TimeColsAxisCell } from './TimeColsAxisCell'\nimport { TimeSlatMeta } from './time-slat-meta'\n\n/* Thin Axis\n------------------------------------------------------------------------------------------------------------------*/\n\ninterface TimeBodyAxisProps {\n  slatMetas: TimeSlatMeta[]\n}\n\nexport class TimeBodyAxis extends BaseComponent<TimeBodyAxisProps> { // just <tr> content\n  render() {\n    return this.props.slatMetas.map((slatMeta: TimeSlatMeta) => (\n      <tr key={slatMeta.key}>\n        <TimeColsAxisCell {...slatMeta} />\n      </tr>\n    ))\n  }\n}\n", "import {\n  createElement, createRef,\n  diffDays,\n  SimpleScrollGridSection,\n  VNode,\n  SimpleScrollGrid,\n  ChunkContentCallbackArgs,\n  ScrollGridSectionConfig,\n  buildNavLinkAttrs,\n  ViewRoot,\n  WeekNumberRoot,\n  RenderHook,\n  DateComponent,\n  ViewProps,\n  RefObject,\n  renderScrollShim,\n  getStickyHeaderDates,\n  getStickyFooterScrollbar,\n  createFormatter,\n  AllDayContentArg,\n  CssDimValue,\n  NowTimer,\n  DateMarker,\n  NowIndicatorRoot,\n} from '@fullcalendar/common'\nimport { AllDaySplitter } from './AllDaySplitter'\nimport { TimeSlatMeta } from './time-slat-meta'\nimport { TimeColsSlatsCoords } from './TimeColsSlatsCoords'\nimport { TimeBodyAxis } from './TimeBodyAxis'\n\nconst DEFAULT_WEEK_NUM_FORMAT = createFormatter({ week: 'short' })\nconst AUTO_ALL_DAY_MAX_EVENT_ROWS = 5\n\n/* An abstract class for all timegrid-related views. Displays one more columns with time slots running vertically.\n----------------------------------------------------------------------------------------------------------------------*/\n// Is a manager for the TimeCols subcomponent and possibly the DayGrid subcomponent (if allDaySlot is on).\n// Responsible for managing width/height.\n\ninterface TimeColsViewState {\n  slatCoords: TimeColsSlatsCoords | null\n}\n\nexport abstract class TimeColsView extends DateComponent<ViewProps, TimeColsViewState> {\n  protected allDaySplitter = new AllDaySplitter() // for use by subclasses\n\n  protected headerElRef: RefObject<HTMLTableCellElement> = createRef<HTMLTableCellElement>()\n  private rootElRef: RefObject<HTMLDivElement> = createRef<HTMLDivElement>()\n  private scrollerElRef: RefObject<HTMLDivElement> = createRef<HTMLDivElement>()\n\n  state = {\n    slatCoords: null,\n  }\n\n  // rendering\n  // ----------------------------------------------------------------------------------------------------\n\n  renderSimpleLayout(\n    headerRowContent: VNode | null,\n    allDayContent: ((contentArg: ChunkContentCallbackArgs) => VNode) | null,\n    timeContent: ((contentArg: ChunkContentCallbackArgs) => VNode) | null,\n  ) {\n    let { context, props } = this\n    let sections: SimpleScrollGridSection[] = []\n    let stickyHeaderDates = getStickyHeaderDates(context.options)\n\n    if (headerRowContent) {\n      sections.push({\n        type: 'header',\n        key: 'header',\n        isSticky: stickyHeaderDates,\n        chunk: {\n          elRef: this.headerElRef,\n          tableClassName: 'fc-col-header',\n          rowContent: headerRowContent,\n        },\n      })\n    }\n\n    if (allDayContent) {\n      sections.push({\n        type: 'body',\n        key: 'all-day',\n        chunk: { content: allDayContent },\n      })\n      sections.push({\n        type: 'body',\n        key: 'all-day-divider',\n        outerContent: ( // TODO: rename to cellContent so don't need to define <tr>?\n          <tr role=\"presentation\" className=\"fc-scrollgrid-section\">\n            <td\n              className={'fc-timegrid-divider ' + context.theme.getClass('tableCellShaded')}\n            />\n          </tr>\n        ),\n      })\n    }\n\n    sections.push({\n      type: 'body',\n      key: 'body',\n      liquid: true,\n      expandRows: Boolean(context.options.expandRows),\n      chunk: {\n        scrollerElRef: this.scrollerElRef,\n        content: timeContent,\n      },\n    })\n\n    return (\n      <ViewRoot viewSpec={context.viewSpec} elRef={this.rootElRef}>\n        {(rootElRef, classNames) => (\n          <div className={['fc-timegrid'].concat(classNames).join(' ')} ref={rootElRef}>\n            <SimpleScrollGrid\n              liquid={!props.isHeightAuto && !props.forPrint}\n              collapsibleWidth={props.forPrint}\n              cols={[{ width: 'shrink' }]}\n              sections={sections}\n            />\n          </div>\n        )}\n      </ViewRoot>\n    )\n  }\n\n  renderHScrollLayout(\n    headerRowContent: VNode | null,\n    allDayContent: ((contentArg: ChunkContentCallbackArgs) => VNode) | null,\n    timeContent: ((contentArg: ChunkContentCallbackArgs) => VNode) | null,\n    colCnt: number,\n    dayMinWidth: number,\n    slatMetas: TimeSlatMeta[],\n    slatCoords: TimeColsSlatsCoords | null, // yuck\n  ) {\n    let ScrollGrid = this.context.pluginHooks.scrollGridImpl\n\n    if (!ScrollGrid) {\n      throw new Error('No ScrollGrid implementation')\n    }\n\n    let { context, props } = this\n    let stickyHeaderDates = !props.forPrint && getStickyHeaderDates(context.options)\n    let stickyFooterScrollbar = !props.forPrint && getStickyFooterScrollbar(context.options)\n    let sections: ScrollGridSectionConfig[] = []\n\n    if (headerRowContent) {\n      sections.push({\n        type: 'header',\n        key: 'header',\n        isSticky: stickyHeaderDates,\n        syncRowHeights: true,\n        chunks: [\n          {\n            key: 'axis',\n            rowContent: (arg: ChunkContentCallbackArgs) => (\n              <tr role=\"presentation\">\n                {this.renderHeadAxis('day', arg.rowSyncHeights[0])}\n              </tr>\n            ),\n          },\n          {\n            key: 'cols',\n            elRef: this.headerElRef,\n            tableClassName: 'fc-col-header',\n            rowContent: headerRowContent,\n          },\n        ],\n      })\n    }\n\n    if (allDayContent) {\n      sections.push({\n        type: 'body',\n        key: 'all-day',\n        syncRowHeights: true,\n        chunks: [\n          {\n            key: 'axis',\n            rowContent: (contentArg: ChunkContentCallbackArgs) => (\n              <tr role=\"presentation\">\n                {this.renderTableRowAxis(contentArg.rowSyncHeights[0])}\n              </tr>\n            ),\n          },\n          {\n            key: 'cols',\n            content: allDayContent,\n          },\n        ],\n      })\n      sections.push({\n        key: 'all-day-divider',\n        type: 'body',\n        outerContent: ( // TODO: rename to cellContent so don't need to define <tr>?\n          <tr role=\"presentation\" className=\"fc-scrollgrid-section\">\n            <td\n              colSpan={2}\n              className={'fc-timegrid-divider ' + context.theme.getClass('tableCellShaded')}\n            />\n          </tr>\n        ),\n      })\n    }\n\n    let isNowIndicator = context.options.nowIndicator\n\n    sections.push({\n      type: 'body',\n      key: 'body',\n      liquid: true,\n      expandRows: Boolean(context.options.expandRows),\n      chunks: [\n        {\n          key: 'axis',\n          content: (arg) => (\n            // TODO: make this now-indicator arrow more DRY with TimeColsContent\n            <div className=\"fc-timegrid-axis-chunk\">\n              <table aria-hidden style={{ height: arg.expandRows ? arg.clientHeight : '' }}>\n                {arg.tableColGroupNode}\n                <tbody>\n                  <TimeBodyAxis slatMetas={slatMetas} />\n                </tbody>\n              </table>\n              <div className=\"fc-timegrid-now-indicator-container\">\n                <NowTimer unit={isNowIndicator ? 'minute' : 'day' /* hacky */}>\n                  {(nowDate: DateMarker) => {\n                    let nowIndicatorTop =\n                      isNowIndicator &&\n                      slatCoords &&\n                      slatCoords.safeComputeTop(nowDate) // might return void\n\n                    if (typeof nowIndicatorTop === 'number') {\n                      return (\n                        <NowIndicatorRoot isAxis date={nowDate}>\n                          {(rootElRef, classNames, innerElRef, innerContent) => (\n                            <div\n                              ref={rootElRef}\n                              className={['fc-timegrid-now-indicator-arrow'].concat(classNames).join(' ')}\n                              style={{ top: nowIndicatorTop }}\n                            >\n                              {innerContent}\n                            </div>\n                          )}\n                        </NowIndicatorRoot>\n                      )\n                    }\n\n                    return null\n                  }}\n                </NowTimer>\n              </div>\n            </div>\n          ),\n        },\n        {\n          key: 'cols',\n          scrollerElRef: this.scrollerElRef,\n          content: timeContent,\n        },\n      ],\n    })\n\n    if (stickyFooterScrollbar) {\n      sections.push({\n        key: 'footer',\n        type: 'footer',\n        isSticky: true,\n        chunks: [\n          {\n            key: 'axis',\n            content: renderScrollShim,\n          },\n          {\n            key: 'cols',\n            content: renderScrollShim,\n          },\n        ],\n      })\n    }\n\n    return (\n      <ViewRoot viewSpec={context.viewSpec} elRef={this.rootElRef}>\n        {(rootElRef, classNames) => (\n          <div className={['fc-timegrid'].concat(classNames).join(' ')} ref={rootElRef}>\n            <ScrollGrid\n              liquid={!props.isHeightAuto && !props.forPrint}\n              collapsibleWidth={false}\n              colGroups={[\n                { width: 'shrink', cols: [{ width: 'shrink' }] }, // TODO: allow no specify cols\n                { cols: [{ span: colCnt, minWidth: dayMinWidth }] },\n              ]}\n              sections={sections}\n            />\n          </div>\n        )}\n      </ViewRoot>\n    )\n  }\n\n  handleScrollTopRequest = (scrollTop: number) => {\n    let scrollerEl = this.scrollerElRef.current\n\n    if (scrollerEl) { // TODO: not sure how this could ever be null. weirdness with the reducer\n      scrollerEl.scrollTop = scrollTop\n    }\n  }\n\n  /* Dimensions\n  ------------------------------------------------------------------------------------------------------------------*/\n\n  getAllDayMaxEventProps() {\n    let { dayMaxEvents, dayMaxEventRows } = this.context.options\n\n    if (dayMaxEvents === true || dayMaxEventRows === true) { // is auto?\n      dayMaxEvents = undefined\n      dayMaxEventRows = AUTO_ALL_DAY_MAX_EVENT_ROWS // make sure \"auto\" goes to a real number\n    }\n\n    return { dayMaxEvents, dayMaxEventRows }\n  }\n\n  /* Header Render Methods\n  ------------------------------------------------------------------------------------------------------------------*/\n\n  renderHeadAxis = (rowKey: 'day' | string, frameHeight: CssDimValue = '') => {\n    let { options } = this.context\n    let { dateProfile } = this.props\n    let range = dateProfile.renderRange\n    let dayCnt = diffDays(range.start, range.end)\n\n    let navLinkAttrs = (dayCnt === 1) // only do in day views (to avoid doing in week views that dont need it)\n      ? buildNavLinkAttrs(this.context, range.start, 'week')\n      : {}\n\n    if (options.weekNumbers && rowKey === 'day') {\n      return (\n        <WeekNumberRoot date={range.start} defaultFormat={DEFAULT_WEEK_NUM_FORMAT}>\n          {(rootElRef, classNames, innerElRef, innerContent) => (\n            <th\n              ref={rootElRef}\n              aria-hidden\n              className={[\n                'fc-timegrid-axis',\n                'fc-scrollgrid-shrink',\n              ].concat(classNames).join(' ')}\n            >\n              <div\n                className=\"fc-timegrid-axis-frame fc-scrollgrid-shrink-frame fc-timegrid-axis-frame-liquid\"\n                style={{ height: frameHeight }}\n              >\n                <a\n                  ref={innerElRef}\n                  className=\"fc-timegrid-axis-cushion fc-scrollgrid-shrink-cushion fc-scrollgrid-sync-inner\"\n                  {...navLinkAttrs}\n                >\n                  {innerContent}\n                </a>\n              </div>\n            </th>\n          )}\n        </WeekNumberRoot>\n      )\n    }\n\n    return (\n      <th aria-hidden className=\"fc-timegrid-axis\">\n        <div className=\"fc-timegrid-axis-frame\" style={{ height: frameHeight }} />\n      </th>\n    )\n  }\n\n  /* Table Component Render Methods\n  ------------------------------------------------------------------------------------------------------------------*/\n\n  // only a one-way height sync. we don't send the axis inner-content height to the DayGrid,\n  // but DayGrid still needs to have classNames on inner elements in order to measure.\n  renderTableRowAxis = (rowHeight?: number) => {\n    let { options, viewApi } = this.context\n    let hookProps: AllDayContentArg = {\n      text: options.allDayText,\n      view: viewApi,\n    }\n\n    return (\n      // TODO: make reusable hook. used in list view too\n      <RenderHook<AllDayContentArg>\n        hookProps={hookProps}\n        classNames={options.allDayClassNames}\n        content={options.allDayContent}\n        defaultContent={renderAllDayInner}\n        didMount={options.allDayDidMount}\n        willUnmount={options.allDayWillUnmount}\n      >\n        {(rootElRef, classNames, innerElRef, innerContent) => (\n          <td\n            ref={rootElRef}\n            aria-hidden\n            className={[\n              'fc-timegrid-axis',\n              'fc-scrollgrid-shrink',\n            ].concat(classNames).join(' ')}\n          >\n            <div\n              className={'fc-timegrid-axis-frame fc-scrollgrid-shrink-frame' + (rowHeight == null ? ' fc-timegrid-axis-frame-liquid' : '')}\n              style={{ height: rowHeight }}\n            >\n              <span className=\"fc-timegrid-axis-cushion fc-scrollgrid-shrink-cushion fc-scrollgrid-sync-inner\" ref={innerElRef}>\n                {innerContent}\n              </span>\n            </div>\n          </td>\n        )}\n      </RenderHook>\n    )\n  }\n\n  handleSlatCoords = (slatCoords: TimeColsSlatsCoords) => {\n    this.setState({ slatCoords })\n  }\n}\n\nfunction renderAllDayInner(hookProps) {\n  return hookProps.text\n}\n", "import {\n  PositionCache,\n  DateMarker,\n  startOfDay,\n  createDuration,\n  asRoughMs,\n  DateProfile,\n  Duration,\n  rangeContainsMarker,\n} from '@fullcalendar/common'\n\nexport class TimeColsSlatsCoords {\n  constructor(\n    public positions: PositionCache,\n    private dateProfile: DateProfile,\n    private slotDuration: Duration,\n  ) {\n  }\n\n  safeComputeTop(date: DateMarker) { // TODO: DRY with computeDateTop\n    let { dateProfile } = this\n\n    if (rangeContainsMarker(dateProfile.currentRange, date)) {\n      let startOfDayDate = startOfDay(date)\n      let timeMs = date.valueOf() - startOfDayDate.valueOf()\n\n      if (\n        timeMs >= asRoughMs(dateProfile.slotMinTime) &&\n        timeMs < asRoughMs(dateProfile.slotMaxTime)\n      ) {\n        return this.computeTimeTop(createDuration(timeMs))\n      }\n    }\n\n    return null\n  }\n\n  // Computes the top coordinate, relative to the bounds of the grid, of the given date.\n  // A `startOfDayDate` must be given for avoiding ambiguity over how to treat midnight.\n  computeDateTop(when: DateMarker, startOfDayDate?: DateMarker) {\n    if (!startOfDayDate) {\n      startOfDayDate = startOfDay(when)\n    }\n    return this.computeTimeTop(createDuration(when.valueOf() - startOfDayDate.valueOf()))\n  }\n\n  // Computes the top coordinate, relative to the bounds of the grid, of the given time (a Duration).\n  // This is a makeshify way to compute the time-top. Assumes all slatMetas dates are uniform.\n  // Eventually allow computation with arbirary slat dates.\n  computeTimeTop(duration: Duration): number {\n    let { positions, dateProfile } = this\n    let len = positions.els.length\n\n    // floating-point value of # of slots covered\n    let slatCoverage = (duration.milliseconds - asRoughMs(dateProfile.slotMinTime)) / asRoughMs(this.slotDuration)\n    let slatIndex\n    let slatRemainder\n\n    // compute a floating-point number for how many slats should be progressed through.\n    // from 0 to number of slats (inclusive)\n    // constrained because slotMinTime/slotMaxTime might be customized.\n    slatCoverage = Math.max(0, slatCoverage)\n    slatCoverage = Math.min(len, slatCoverage)\n\n    // an integer index of the furthest whole slat\n    // from 0 to number slats (*exclusive*, so len-1)\n    slatIndex = Math.floor(slatCoverage)\n    slatIndex = Math.min(slatIndex, len - 1)\n\n    // how much further through the slatIndex slat (from 0.0-1.0) must be covered in addition.\n    // could be 1.0 if slatCoverage is covering *all* the slots\n    slatRemainder = slatCoverage - slatIndex\n\n    return positions.tops[slatIndex] +\n      positions.getHeight(slatIndex) * slatRemainder\n  }\n}\n", "import {\n  createElement,\n  BaseComponent,\n  RefMap,\n  RenderHook,\n  SlotLaneContentArg,\n} from '@fullcalendar/common'\nimport { TimeColsAxisCell } from './TimeColsAxisCell'\nimport { TimeSlatMeta } from './time-slat-meta'\n\nexport interface TimeColsSlatsBodyProps {\n  axis: boolean\n  slatMetas: TimeSlatMeta[]\n  slatElRefs: RefMap<HTMLTableRowElement>\n}\n\nexport class TimeColsSlatsBody extends BaseComponent<TimeColsSlatsBodyProps> {\n  render() {\n    let { props, context } = this\n    let { options } = context\n    let { slatElRefs } = props\n\n    return (\n      <tbody>\n        {props.slatMetas.map((slatMeta, i) => {\n          let hookProps: SlotLaneContentArg = {\n            time: slatMeta.time,\n            date: context.dateEnv.toDate(slatMeta.date),\n            view: context.viewApi,\n          }\n\n          let classNames = [\n            'fc-timegrid-slot',\n            'fc-timegrid-slot-lane',\n            slatMeta.isLabeled ? '' : 'fc-timegrid-slot-minor',\n          ]\n\n          return (\n            <tr\n              key={slatMeta.key}\n              ref={slatElRefs.createRef(slatMeta.key)}\n            >\n              {props.axis && (\n                <TimeColsAxisCell {...slatMeta} />\n              )}\n              <RenderHook\n                hookProps={hookProps}\n                classNames={options.slotLaneClassNames}\n                content={options.slotLaneContent}\n                didMount={options.slotLaneDidMount}\n                willUnmount={options.slotLaneWillUnmount}\n              >\n                {(rootElRef, customClassNames, innerElRef, innerContent) => (\n                  <td\n                    ref={rootElRef}\n                    className={classNames.concat(customClassNames).join(' ')}\n                    data-time={slatMeta.isoTimeStr}\n                  >\n                    {innerContent}\n                  </td>\n                )}\n              </RenderHook>\n            </tr>\n          )\n        })}\n      </tbody>\n    )\n  }\n}\n", "import {\n  createElement,\n  VNode,\n  BaseComponent,\n  RefMap,\n  CssDimValue,\n  createRef,\n  PositionCache,\n  DateProfile,\n} from '@fullcalendar/common'\nimport { TimeSlatMeta } from './time-slat-meta'\nimport { TimeColsSlatsCoords } from './TimeColsSlatsCoords'\nimport { TimeColsSlatsBody } from './TimeColsSlatsBody'\n\nexport interface TimeColsSlatsProps extends TimeColsSlatsContentProps {\n  dateProfile: DateProfile\n  clientWidth: number | null\n  minHeight: CssDimValue\n  tableMinWidth: CssDimValue\n  tableColGroupNode: VNode\n  onCoords?: (coords: TimeColsSlatsCoords | null) => void\n}\n\ninterface TimeColsSlatsContentProps {\n  axis: boolean\n  slatMetas: TimeSlatMeta[]\n}\n\n/*\nfor the horizontal \"slats\" that run width-wise. Has a time axis on a side. Depends on RTL.\n*/\n\nexport class TimeColsSlats extends BaseComponent<TimeColsSlatsProps> {\n  private rootElRef = createRef<HTMLDivElement>()\n  private slatElRefs = new RefMap<HTMLTableRowElement>()\n\n  render() {\n    let { props, context } = this\n\n    return (\n      <div ref={this.rootElRef} className=\"fc-timegrid-slots\">\n        <table\n          aria-hidden\n          className={context.theme.getClass('table')}\n          style={{\n            minWidth: props.tableMinWidth,\n            width: props.clientWidth,\n            height: props.minHeight,\n          }}\n        >\n          {props.tableColGroupNode /* relies on there only being a single <col> for the axis */}\n          <TimeColsSlatsBody\n            slatElRefs={this.slatElRefs}\n            axis={props.axis}\n            slatMetas={props.slatMetas}\n          />\n        </table>\n      </div>\n    )\n  }\n\n  componentDidMount() {\n    this.updateSizing()\n  }\n\n  componentDidUpdate() {\n    this.updateSizing()\n  }\n\n  componentWillUnmount() {\n    if (this.props.onCoords) {\n      this.props.onCoords(null)\n    }\n  }\n\n  updateSizing() {\n    let { context, props } = this\n\n    if (\n      props.onCoords &&\n      props.clientWidth !== null // means sizing has stabilized\n    ) {\n      let rootEl = this.rootElRef.current\n\n      if (rootEl.offsetHeight) { // not hidden by css\n        props.onCoords(\n          new TimeColsSlatsCoords(\n            new PositionCache(\n              this.rootElRef.current,\n              collectSlatEls(this.slatElRefs.currentMap, props.slatMetas),\n              false,\n              true, // vertical\n            ),\n            this.props.dateProfile,\n            context.options.slotDuration,\n          ),\n        )\n      }\n    }\n  }\n}\n\nfunction collectSlatEls(elMap: { [key: string]: HTMLElement }, slatMetas: TimeSlatMeta[]) {\n  return slatMetas.map((slatMeta) => elMap[slatMeta.key])\n}\n", "import { DateMarker, Seg, EventSegUiInteractionState } from '@fullcalendar/common'\n\n// JUST A DATA STRUCTURE, not a component\n\nexport interface TimeColsSeg extends Seg {\n  col: number\n  start: DateMarker\n  end: DateMarker\n}\n\nexport function splitSegsByCol(segs: TimeColsSeg[] | null, colCnt: number) { // can be given null/undefined!\n  let segsByCol: TimeColsSeg[][] = []\n  let i\n\n  for (i = 0; i < colCnt; i += 1) {\n    segsByCol.push([])\n  }\n\n  if (segs) {\n    for (i = 0; i < segs.length; i += 1) {\n      segsByCol[segs[i].col].push(segs[i])\n    }\n  }\n\n  return segsByCol\n}\n\nexport function splitInteractionByCol(ui: EventSegUiInteractionState | null, colCnt: number) {\n  let byRow: EventSegUiInteractionState[] = []\n\n  if (!ui) {\n    for (let i = 0; i < colCnt; i += 1) {\n      byRow[i] = null\n    }\n  } else {\n    for (let i = 0; i < colCnt; i += 1) {\n      byRow[i] = {\n        affectedInstances: ui.affectedInstances,\n        isEvent: ui.isEvent,\n        segs: [],\n      }\n    }\n\n    for (let seg of ui.segs) {\n      byRow[seg.col].segs.push(seg)\n    }\n  }\n\n  return byRow\n}\n", "import {\n  createElement, MoreLinkContentArg, MoreLinkRoot, BaseComponent, createRef, setRef,\n  Dictionary, DateProfile, DateRange, DateMarker, EventSegUiInteractionState, CssDimValue,\n} from '@fullcalendar/common'\nimport { renderPlainFgSegs } from './TimeCol'\nimport { TimeColsSeg } from './TimeColsSeg'\n\nexport interface TimeColMoreLinkProps {\n  hiddenSegs: TimeColsSeg[]\n  top: CssDimValue\n  bottom: CssDimValue\n  extraDateSpan?: Dictionary\n  dateProfile: DateProfile\n  todayRange: DateRange\n  nowDate: DateMarker\n  eventSelection: string\n  eventDrag: EventSegUiInteractionState\n  eventResize: EventSegUiInteractionState\n}\n\nexport class TimeColMoreLink extends BaseComponent<TimeColMoreLinkProps> {\n  rootElRef = createRef<HTMLElement>()\n\n  render() {\n    let { props } = this\n    return (\n      <MoreLinkRoot\n        allDayDate={null}\n        moreCnt={props.hiddenSegs.length}\n        allSegs={props.hiddenSegs}\n        hiddenSegs={props.hiddenSegs}\n        alignmentElRef={this.rootElRef}\n        defaultContent={renderMoreLinkInner}\n        extraDateSpan={props.extraDateSpan}\n        dateProfile={props.dateProfile}\n        todayRange={props.todayRange}\n        popoverContent={() => renderPlainFgSegs(props.hiddenSegs, props)}\n      >\n        {(rootElRef, classNames, innerElRef, innerContent, handleClick, title, isExpanded, popoverId) => (\n          <a\n            ref={(el: HTMLElement | null) => {\n              setRef(rootElRef, el)\n              setRef(this.rootElRef, el)\n            }}\n            className={['fc-timegrid-more-link'].concat(classNames).join(' ')}\n            style={{ top: props.top, bottom: props.bottom }}\n            onClick={handleClick}\n            title={title}\n            aria-expanded={isExpanded}\n            aria-controls={popoverId}\n          >\n            <div ref={innerElRef} className=\"fc-timegrid-more-link-inner fc-sticky\">\n              {innerContent}\n            </div>\n          </a>\n        )}\n      </MoreLinkRoot>\n    )\n  }\n}\n\nfunction renderMoreLinkInner(props: MoreLinkContentArg) {\n  return props.shortText\n}\n", "import {\n  SegEntry,\n  SegHierarchy,\n  SegRect,\n  buildEntryKey,\n  getEntrySpanEnd,\n  binarySearch,\n  SegEntryGroup,\n  groupIntersectingEntries,\n} from '@fullcalendar/common'\n\ninterface SegNode extends SegEntry {\n  nextLevelNodes: SegNode[] // with highest-pressure first\n}\n\ntype SegNodeAndPressure = [ SegNode, number ]\n\ninterface SegSiblingRange { // will ALWAYS have span of 1 or more items. if not, will be null\n  level: number\n  lateralStart: number\n  lateralEnd: number\n}\n\nexport interface SegWebRect extends SegRect {\n  stackDepth: number\n  stackForward: number\n}\n\n// segInputs assumed sorted\nexport function buildPositioning(\n  segInputs: SegEntry[],\n  strictOrder?: boolean,\n  maxStackCnt?: number,\n): { segRects: SegWebRect[], hiddenGroups: SegEntryGroup[] } {\n  let hierarchy = new SegHierarchy()\n  if (strictOrder != null) {\n    hierarchy.strictOrder = strictOrder\n  }\n  if (maxStackCnt != null) {\n    hierarchy.maxStackCnt = maxStackCnt\n  }\n\n  let hiddenEntries = hierarchy.addSegs(segInputs)\n  let hiddenGroups = groupIntersectingEntries(hiddenEntries)\n\n  let web = buildWeb(hierarchy)\n  web = stretchWeb(web, 1) // all levelCoords/thickness will have 0.0-1.0\n  let segRects = webToRects(web)\n\n  return { segRects, hiddenGroups }\n}\n\nfunction buildWeb(hierarchy: SegHierarchy): SegNode[] {\n  const { entriesByLevel } = hierarchy\n\n  const buildNode = cacheable(\n    (level: number, lateral: number) => level + ':' + lateral,\n    (level: number, lateral: number): SegNodeAndPressure => {\n      let siblingRange = findNextLevelSegs(hierarchy, level, lateral)\n      let nextLevelRes = buildNodes(siblingRange, buildNode)\n      let entry = entriesByLevel[level][lateral]\n\n      return [\n        { ...entry, nextLevelNodes: nextLevelRes[0] },\n        entry.thickness + nextLevelRes[1], // the pressure builds\n      ]\n    },\n  )\n\n  return buildNodes(\n    entriesByLevel.length\n      ? { level: 0, lateralStart: 0, lateralEnd: entriesByLevel[0].length }\n      : null,\n    buildNode,\n  )[0]\n}\n\nfunction buildNodes(\n  siblingRange: SegSiblingRange | null,\n  buildNode: (level: number, lateral: number) => SegNodeAndPressure,\n): [SegNode[], number] { // number is maxPressure\n  if (!siblingRange) {\n    return [[], 0]\n  }\n\n  let { level, lateralStart, lateralEnd } = siblingRange\n  let lateral = lateralStart\n  let pairs: SegNodeAndPressure[] = []\n\n  while (lateral < lateralEnd) {\n    pairs.push(buildNode(level, lateral))\n    lateral += 1\n  }\n\n  pairs.sort(cmpDescPressures)\n\n  return [\n    pairs.map(extractNode),\n    pairs[0][1], // first item's pressure\n  ]\n}\n\nfunction cmpDescPressures(a: SegNodeAndPressure, b: SegNodeAndPressure) { // sort pressure high -> low\n  return b[1] - a[1]\n}\n\nfunction extractNode(a: SegNodeAndPressure): SegNode {\n  return a[0]\n}\n\nfunction findNextLevelSegs(hierarchy: SegHierarchy, subjectLevel: number, subjectLateral: number): SegSiblingRange | null {\n  let { levelCoords, entriesByLevel } = hierarchy\n  let subjectEntry = entriesByLevel[subjectLevel][subjectLateral]\n  let afterSubject = levelCoords[subjectLevel] + subjectEntry.thickness\n  let levelCnt = levelCoords.length\n  let level = subjectLevel\n\n  // skip past levels that are too high up\n  for (; level < levelCnt && levelCoords[level] < afterSubject; level += 1) ; // do nothing\n\n  for (; level < levelCnt; level += 1) {\n    let entries = entriesByLevel[level]\n    let entry: SegEntry\n    let searchIndex = binarySearch(entries, subjectEntry.span.start, getEntrySpanEnd)\n    let lateralStart = searchIndex[0] + searchIndex[1] // if exact match (which doesn't collide), go to next one\n    let lateralEnd = lateralStart\n\n    while ( // loop through entries that horizontally intersect\n      (entry = entries[lateralEnd]) && // but not past the whole seg list\n      entry.span.start < subjectEntry.span.end\n    ) { lateralEnd += 1 }\n\n    if (lateralStart < lateralEnd) {\n      return { level, lateralStart, lateralEnd }\n    }\n  }\n\n  return null\n}\n\nfunction stretchWeb(topLevelNodes: SegNode[], totalThickness: number): SegNode[] {\n  const stretchNode = cacheable(\n    (node: SegNode, startCoord: number, prevThickness: number) => buildEntryKey(node),\n    (node: SegNode, startCoord: number, prevThickness: number): [number, SegNode] => { // [startCoord, node]\n      let { nextLevelNodes, thickness } = node\n      let allThickness = thickness + prevThickness\n      let thicknessFraction = thickness / allThickness\n      let endCoord: number\n      let newChildren: SegNode[] = []\n\n      if (!nextLevelNodes.length) {\n        endCoord = totalThickness\n      } else {\n        for (let childNode of nextLevelNodes) {\n          if (endCoord === undefined) {\n            let res = stretchNode(childNode, startCoord, allThickness)\n            endCoord = res[0]\n            newChildren.push(res[1])\n          } else {\n            let res = stretchNode(childNode, endCoord, 0)\n            newChildren.push(res[1])\n          }\n        }\n      }\n\n      let newThickness = (endCoord - startCoord) * thicknessFraction\n      return [endCoord - newThickness, {\n        ...node,\n        thickness: newThickness,\n        nextLevelNodes: newChildren,\n      }]\n    },\n  )\n\n  return topLevelNodes.map((node: SegNode) => stretchNode(node, 0, 0)[1])\n}\n\n// not sorted in any particular order\nfunction webToRects(topLevelNodes: SegNode[]): SegWebRect[] {\n  let rects: SegWebRect[] = []\n\n  const processNode = cacheable(\n    (node: SegNode, levelCoord: number, stackDepth: number) => buildEntryKey(node),\n    (node: SegNode, levelCoord: number, stackDepth: number) => { // returns forwardPressure\n      let rect: SegWebRect = {\n        ...node,\n        levelCoord,\n        stackDepth,\n        stackForward: 0, // will assign after recursing\n      }\n      rects.push(rect)\n\n      return (\n        rect.stackForward = processNodes(node.nextLevelNodes, levelCoord + node.thickness, stackDepth + 1) + 1\n      )\n    },\n  )\n\n  function processNodes(nodes: SegNode[], levelCoord: number, stackDepth: number) { // returns stackForward\n    let stackForward = 0\n    for (let node of nodes) {\n      stackForward = Math.max(processNode(node, levelCoord, stackDepth), stackForward)\n    }\n    return stackForward\n  }\n\n  processNodes(topLevelNodes, 0, 0)\n  return rects // TODO: sort rects by levelCoord to be consistent with toRects?\n}\n\n// TODO: move to general util\n\nfunction cacheable<Args extends any[], Res>(\n  keyFunc: (...args: Args) => string,\n  workFunc: (...args: Args) => Res,\n): ((...args: Args) => Res) {\n  const cache: { [key: string]: Res } = {}\n\n  return (...args: Args) => {\n    let key = keyFunc(...args)\n    return (key in cache)\n      ? cache[key]\n      : (cache[key] = workFunc(...args))\n  }\n}\n", "import {\n  SegSpan,\n  SegEntry,\n  SegEntryGroup,\n  DateMarker,\n} from '@fullcalendar/common'\nimport { TimeColsSeg } from './TimeColsSeg'\nimport { TimeColsSlatsCoords } from './TimeColsSlatsCoords'\nimport { SegWebRect, buildPositioning } from './seg-web'\n\n// public interface\n// ------------------------------------------------------------------------------------------\n\nexport interface TimeColFgSegPlacement {\n  seg: TimeColsSeg\n  rect: SegWebRect | null\n}\n\nexport function computeSegVCoords(\n  segs: TimeColsSeg[],\n  colDate: DateMarker,\n  slatCoords: TimeColsSlatsCoords = null,\n  eventMinHeight: number = 0, // might be null/undefined :(\n): SegSpan[] {\n  let vcoords: SegSpan[] = []\n\n  if (slatCoords) {\n    for (let i = 0; i < segs.length; i += 1) {\n      let seg = segs[i]\n      let spanStart = slatCoords.computeDateTop(seg.start, colDate)\n      let spanEnd = Math.max(\n        spanStart + (eventMinHeight || 0), // :(\n        slatCoords.computeDateTop(seg.end, colDate),\n      )\n      vcoords.push({\n        start: Math.round(spanStart), // for barely-overlapping collisions\n        end: Math.round(spanEnd), //\n      })\n    }\n  }\n\n  return vcoords\n}\n\nexport function computeFgSegPlacements(\n  segs: TimeColsSeg[],\n  segVCoords: SegSpan[], // might not have for every seg\n  eventOrderStrict?: boolean,\n  eventMaxStack?: number,\n): { segPlacements: TimeColFgSegPlacement[], hiddenGroups: SegEntryGroup[] } {\n  let segInputs: SegEntry[] = []\n  let dumbSegs: TimeColsSeg[] = [] // segs without coords\n\n  for (let i = 0; i < segs.length; i += 1) {\n    let vcoords = segVCoords[i]\n    if (vcoords) {\n      segInputs.push({\n        index: i,\n        thickness: 1,\n        span: vcoords,\n      })\n    } else {\n      dumbSegs.push(segs[i])\n    }\n  }\n\n  let { segRects, hiddenGroups } = buildPositioning(segInputs, eventOrderStrict, eventMaxStack)\n  let segPlacements: TimeColFgSegPlacement[] = []\n\n  for (let segRect of segRects) {\n    segPlacements.push({\n      seg: segs[segRect.index],\n      rect: segRect,\n    })\n  }\n\n  for (let dumbSeg of dumbSegs) {\n    segPlacements.push({ seg: dumbSeg, rect: null })\n  }\n\n  return { segPlacements, hiddenGroups }\n}\n", "import { createElement, StandardEvent, BaseComponent, MinimalEventProps, createFormatter } from '@fullcalendar/common'\n\nconst DEFAULT_TIME_FORMAT = createFormatter({\n  hour: 'numeric',\n  minute: '2-digit',\n  meridiem: false,\n})\n\nexport interface TimeColEventProps extends MinimalEventProps {\n  isShort: boolean\n}\n\nexport class TimeColEvent extends BaseComponent<TimeColEventProps> {\n  render() {\n    let classNames = [\n      'fc-timegrid-event',\n      'fc-v-event',\n    ]\n\n    if (this.props.isShort) {\n      classNames.push('fc-timegrid-event-short')\n    }\n\n    return (\n      <StandardEvent\n        {...this.props}\n        defaultTimeFormat={DEFAULT_TIME_FORMAT}\n        extraClassNames={classNames}\n      />\n    )\n  }\n}\n", "import {\n  DateMarker, BaseComponent, createElement,\n  DateRange, DayCellContent, DateProfile,\n} from '@fullcalendar/common'\n\nexport interface TimeColMiscProps { // should be given nowDate too??\n  dateProfile: DateProfile\n  date: DateMarker\n  todayRange: DateRange\n  extraHookProps?: any\n}\n\nexport class TimeColMisc extends BaseComponent<TimeColMiscProps> {\n  render() {\n    let { props } = this\n\n    return (\n      <DayCellContent date={props.date} dateProfile={props.dateProfile} todayRange={props.todayRange} extraHookProps={props.extraHookProps}>\n        {(innerElRef, innerContent) => (\n          innerContent &&\n            <div className=\"fc-timegrid-col-misc\" ref={innerElRef}>{innerContent}</div>\n        )}\n      </DayCellContent>\n    )\n  }\n}\n", "import {\n  Ref, DateMarker, BaseComponent, createElement, EventSegUiInteractionState, Seg, getSegMeta,\n  DateRange, Fragment, DayCellRoot, NowIndicatorRoot, BgEvent, renderFill, buildIsoString, computeEarliestSegStart,\n  DateProfile, buildEventRangeKey, sortEventSegs, memoize, SegEntryGroup, SegEntry, Dictionary, SegSpan, CssDimValue,\n} from '@fullcalendar/common'\nimport { TimeColMoreLink } from './TimeColMoreLink'\nimport { TimeColsSeg } from './TimeColsSeg'\nimport { TimeColsSlatsCoords } from './TimeColsSlatsCoords'\nimport { SegWebRect } from './seg-web'\nimport { computeFgSegPlacements, computeSegVCoords } from './event-placement'\nimport { TimeColEvent } from './TimeColEvent'\nimport { TimeColMisc } from './TimeColMisc'\n\nexport interface TimeColProps {\n  elRef?: Ref<HTMLTableCellElement>\n  dateProfile: DateProfile\n  date: DateMarker\n  nowDate: DateMarker\n  todayRange: DateRange\n  extraDataAttrs?: any\n  extraHookProps?: any\n  extraClassNames?: string[]\n  extraDateSpan?: Dictionary\n  fgEventSegs: TimeColsSeg[]\n  bgEventSegs: TimeColsSeg[]\n  businessHourSegs: TimeColsSeg[]\n  nowIndicatorSegs: TimeColsSeg[]\n  dateSelectionSegs: TimeColsSeg[]\n  eventSelection: string\n  eventDrag: EventSegUiInteractionState | null\n  eventResize: EventSegUiInteractionState | null\n  slatCoords: TimeColsSlatsCoords\n  forPrint: boolean\n}\n\nexport class TimeCol extends BaseComponent<TimeColProps> {\n  sortEventSegs = memoize(sortEventSegs)\n  // TODO: memoize event-placement?\n\n  render() {\n    let { props, context } = this\n    let isSelectMirror = context.options.selectMirror\n\n    let mirrorSegs: Seg[] = // yuck\n      (props.eventDrag && props.eventDrag.segs) ||\n      (props.eventResize && props.eventResize.segs) ||\n      (isSelectMirror && props.dateSelectionSegs) ||\n      []\n\n    let interactionAffectedInstances = // TODO: messy way to compute this\n      (props.eventDrag && props.eventDrag.affectedInstances) ||\n      (props.eventResize && props.eventResize.affectedInstances) ||\n      {}\n\n    let sortedFgSegs = this.sortEventSegs(props.fgEventSegs, context.options.eventOrder) as TimeColsSeg[]\n\n    return (\n      <DayCellRoot\n        elRef={props.elRef}\n        date={props.date}\n        dateProfile={props.dateProfile}\n        todayRange={props.todayRange}\n        extraHookProps={props.extraHookProps}\n      >\n        {(rootElRef, classNames, dataAttrs) => (\n          <td\n            ref={rootElRef}\n            role=\"gridcell\"\n            className={['fc-timegrid-col'].concat(classNames, props.extraClassNames || []).join(' ')}\n            {...dataAttrs}\n            {...props.extraDataAttrs}\n          >\n            <div className=\"fc-timegrid-col-frame\">\n              <div className=\"fc-timegrid-col-bg\">\n                {this.renderFillSegs(props.businessHourSegs, 'non-business')}\n                {this.renderFillSegs(props.bgEventSegs, 'bg-event')}\n                {this.renderFillSegs(props.dateSelectionSegs, 'highlight')}\n              </div>\n              <div className=\"fc-timegrid-col-events\">\n                {this.renderFgSegs(\n                  sortedFgSegs,\n                  interactionAffectedInstances,\n                  false,\n                  false,\n                  false,\n                )}\n              </div>\n              <div className=\"fc-timegrid-col-events\">\n                {this.renderFgSegs(\n                  mirrorSegs as TimeColsSeg[],\n                  {},\n                  Boolean(props.eventDrag),\n                  Boolean(props.eventResize),\n                  Boolean(isSelectMirror),\n                )}\n              </div>\n              <div className=\"fc-timegrid-now-indicator-container\">\n                {this.renderNowIndicator(props.nowIndicatorSegs)}\n              </div>\n              <TimeColMisc\n                date={props.date}\n                dateProfile={props.dateProfile}\n                todayRange={props.todayRange}\n                extraHookProps={props.extraHookProps}\n              />\n            </div>\n          </td>\n        )}\n      </DayCellRoot>\n    )\n  }\n\n  renderFgSegs(\n    sortedFgSegs: TimeColsSeg[],\n    segIsInvisible: { [instanceId: string]: any },\n    isDragging: boolean,\n    isResizing: boolean,\n    isDateSelecting: boolean,\n  ) {\n    let { props } = this\n    if (props.forPrint) {\n      return renderPlainFgSegs(sortedFgSegs, props)\n    }\n    return this.renderPositionedFgSegs(sortedFgSegs, segIsInvisible, isDragging, isResizing, isDateSelecting)\n  }\n\n  renderPositionedFgSegs(\n    segs: TimeColsSeg[], // if not mirror, needs to be sorted\n    segIsInvisible: { [instanceId: string]: any },\n    isDragging: boolean,\n    isResizing: boolean,\n    isDateSelecting: boolean,\n  ) {\n    let { eventMaxStack, eventShortHeight, eventOrderStrict, eventMinHeight } = this.context.options\n    let { date, slatCoords, eventSelection, todayRange, nowDate } = this.props\n    let isMirror = isDragging || isResizing || isDateSelecting\n    let segVCoords = computeSegVCoords(segs, date, slatCoords, eventMinHeight)\n    let { segPlacements, hiddenGroups } = computeFgSegPlacements(segs, segVCoords, eventOrderStrict, eventMaxStack)\n\n    return (\n      <Fragment>\n        {this.renderHiddenGroups(hiddenGroups, segs)}\n        {segPlacements.map((segPlacement) => {\n          let { seg, rect } = segPlacement\n          let instanceId = seg.eventRange.instance.instanceId\n          let isVisible = isMirror || Boolean(!segIsInvisible[instanceId] && rect)\n          let vStyle = computeSegVStyle(rect && rect.span)\n          let hStyle = (!isMirror && rect) ? this.computeSegHStyle(rect) : { left: 0, right: 0 }\n          let isInset = Boolean(rect) && rect.stackForward > 0\n          let isShort = Boolean(rect) && (rect.span.end - rect.span.start) < eventShortHeight // look at other places for this problem\n\n          return (\n            <div\n              className={\n                'fc-timegrid-event-harness' +\n                (isInset ? ' fc-timegrid-event-harness-inset' : '')\n              }\n              key={instanceId}\n              style={{\n                visibility: isVisible ? ('' as any) : 'hidden',\n                ...vStyle,\n                ...hStyle,\n              }}\n            >\n              <TimeColEvent\n                seg={seg}\n                isDragging={isDragging}\n                isResizing={isResizing}\n                isDateSelecting={isDateSelecting}\n                isSelected={instanceId === eventSelection}\n                isShort={isShort}\n                {...getSegMeta(seg, todayRange, nowDate)}\n              />\n            </div>\n          )\n        })}\n      </Fragment>\n    )\n  }\n\n  // will already have eventMinHeight applied because segInputs already had it\n  renderHiddenGroups(hiddenGroups: SegEntryGroup[], segs: TimeColsSeg[]) {\n    let { extraDateSpan, dateProfile, todayRange, nowDate, eventSelection, eventDrag, eventResize } = this.props\n    return (\n      <Fragment>\n        {hiddenGroups.map((hiddenGroup) => {\n          let positionCss = computeSegVStyle(hiddenGroup.span)\n          let hiddenSegs = compileSegsFromEntries(hiddenGroup.entries, segs)\n          return (\n            <TimeColMoreLink\n              key={buildIsoString(computeEarliestSegStart(hiddenSegs))}\n              hiddenSegs={hiddenSegs}\n              top={positionCss.top}\n              bottom={positionCss.bottom}\n              extraDateSpan={extraDateSpan}\n              dateProfile={dateProfile}\n              todayRange={todayRange}\n              nowDate={nowDate}\n              eventSelection={eventSelection}\n              eventDrag={eventDrag}\n              eventResize={eventResize}\n            />\n          )\n        })}\n      </Fragment>\n    )\n  }\n\n  renderFillSegs(segs: TimeColsSeg[], fillType: string) {\n    let { props, context } = this\n    let segVCoords = computeSegVCoords(segs, props.date, props.slatCoords, context.options.eventMinHeight) // don't assume all populated\n\n    let children = segVCoords.map((vcoords, i) => {\n      let seg = segs[i]\n      return (\n        <div\n          key={buildEventRangeKey(seg.eventRange)}\n          className=\"fc-timegrid-bg-harness\"\n          style={computeSegVStyle(vcoords)}\n        >\n          {fillType === 'bg-event' ?\n            <BgEvent seg={seg} {...getSegMeta(seg, props.todayRange, props.nowDate)} /> :\n            renderFill(fillType)}\n        </div>\n      )\n    })\n\n    return <Fragment>{children}</Fragment>\n  }\n\n  renderNowIndicator(segs: TimeColsSeg[]) {\n    let { slatCoords, date } = this.props\n\n    if (!slatCoords) { return null }\n\n    return segs.map((seg, i) => (\n      <NowIndicatorRoot\n        isAxis={false}\n        date={date}\n        // key doesn't matter. will only ever be one\n        key={i} // eslint-disable-line react/no-array-index-key\n      >\n        {(rootElRef, classNames, innerElRef, innerContent) => (\n          <div\n            ref={rootElRef}\n            className={['fc-timegrid-now-indicator-line'].concat(classNames).join(' ')}\n            style={{ top: slatCoords.computeDateTop(seg.start, date) }}\n          >\n            {innerContent}\n          </div>\n        )}\n      </NowIndicatorRoot>\n    ))\n  }\n\n  computeSegHStyle(segHCoords: SegWebRect) {\n    let { isRtl, options } = this.context\n    let shouldOverlap = options.slotEventOverlap\n    let nearCoord = segHCoords.levelCoord // the left side if LTR. the right side if RTL. floating-point\n    let farCoord = segHCoords.levelCoord + segHCoords.thickness // the right side if LTR. the left side if RTL. floating-point\n    let left // amount of space from left edge, a fraction of the total width\n    let right // amount of space from right edge, a fraction of the total width\n\n    if (shouldOverlap) {\n      // double the width, but don't go beyond the maximum forward coordinate (1.0)\n      farCoord = Math.min(1, nearCoord + (farCoord - nearCoord) * 2)\n    }\n\n    if (isRtl) {\n      left = 1 - farCoord\n      right = nearCoord\n    } else {\n      left = nearCoord\n      right = 1 - farCoord\n    }\n\n    let props = {\n      zIndex: segHCoords.stackDepth + 1, // convert from 0-base to 1-based\n      left: left * 100 + '%',\n      right: right * 100 + '%',\n    }\n\n    if (shouldOverlap && !segHCoords.stackForward) {\n      // add padding to the edge so that forward stacked events don't cover the resizer's icon\n      props[isRtl ? 'marginLeft' : 'marginRight'] = 10 * 2 // 10 is a guesstimate of the icon's width\n    }\n\n    return props\n  }\n}\n\nexport function renderPlainFgSegs(\n  sortedFgSegs: TimeColsSeg[],\n  { todayRange, nowDate, eventSelection, eventDrag, eventResize }: {\n    todayRange: DateRange\n    nowDate: DateMarker\n    eventSelection: string\n    eventDrag: EventSegUiInteractionState | null\n    eventResize: EventSegUiInteractionState | null\n  },\n) {\n  let hiddenInstances =\n    (eventDrag ? eventDrag.affectedInstances : null) ||\n    (eventResize ? eventResize.affectedInstances : null) ||\n    {}\n  return (\n    <Fragment>\n      {sortedFgSegs.map((seg) => {\n        let instanceId = seg.eventRange.instance.instanceId\n        return (\n          <div\n            key={instanceId}\n            style={{ visibility: hiddenInstances[instanceId] ? 'hidden' : ('' as any) }}\n          >\n            <TimeColEvent\n              seg={seg}\n              isDragging={false}\n              isResizing={false}\n              isDateSelecting={false}\n              isSelected={instanceId === eventSelection}\n              isShort={false}\n              {...getSegMeta(seg, todayRange, nowDate)}\n            />\n          </div>\n        )\n      })}\n    </Fragment>\n  )\n}\n\nfunction computeSegVStyle(segVCoords: SegSpan | null): { top: CssDimValue, bottom: CssDimValue } {\n  if (!segVCoords) {\n    return { top: '', bottom: '' }\n  }\n  return {\n    top: segVCoords.start,\n    bottom: -segVCoords.end,\n  }\n}\n\nfunction compileSegsFromEntries(\n  segEntries: SegEntry[],\n  allSegs: TimeColsSeg[],\n): TimeColsSeg[] {\n  return segEntries.map((segEntry) => allSegs[segEntry.index])\n}\n", "import {\n  createElement, VNode,\n  BaseComponent,\n  EventSegUiInteractionState,\n  CssDimValue,\n  DateMarker,\n  RefMap,\n  createRef,\n  PositionCache,\n  memoize,\n  DateRange,\n  NowIndicatorRoot,\n  DateProfile,\n  DayTableCell,\n} from '@fullcalendar/common'\nimport { TimeColsSeg, splitSegsByCol, splitInteractionByCol } from './TimeColsSeg'\nimport { TimeColsSlatsCoords } from './TimeColsSlatsCoords'\nimport { TimeCol } from './TimeCol'\n\nexport interface TimeColsContentProps {\n  axis: boolean\n  cells: DayTableCell[]\n  dateProfile: DateProfile\n  nowDate: DateMarker\n  todayRange: DateRange\n  businessHourSegs: TimeColsSeg[]\n  bgEventSegs: TimeColsSeg[]\n  fgEventSegs: TimeColsSeg[]\n  dateSelectionSegs: TimeColsSeg[]\n  eventSelection: string\n  eventDrag: EventSegUiInteractionState | null\n  eventResize: EventSegUiInteractionState | null\n  nowIndicatorSegs: TimeColsSeg[]\n  clientWidth: number | null\n  tableMinWidth: CssDimValue\n  tableColGroupNode: VNode\n  slatCoords: TimeColsSlatsCoords\n  onColCoords?: (colCoords: PositionCache) => void\n  forPrint: boolean\n}\n\nexport class TimeColsContent extends BaseComponent<TimeColsContentProps> { // TODO: rename\n  private splitFgEventSegs = memoize(splitSegsByCol)\n  private splitBgEventSegs = memoize(splitSegsByCol)\n  private splitBusinessHourSegs = memoize(splitSegsByCol)\n  private splitNowIndicatorSegs = memoize(splitSegsByCol)\n  private splitDateSelectionSegs = memoize(splitSegsByCol)\n  private splitEventDrag = memoize(splitInteractionByCol)\n  private splitEventResize = memoize(splitInteractionByCol)\n  private rootElRef = createRef<HTMLDivElement>()\n  private cellElRefs = new RefMap<HTMLTableCellElement>()\n\n  render() {\n    let { props, context } = this\n    let nowIndicatorTop =\n      context.options.nowIndicator &&\n      props.slatCoords &&\n      props.slatCoords.safeComputeTop(props.nowDate) // might return void\n\n    let colCnt = props.cells.length\n    let fgEventSegsByRow = this.splitFgEventSegs(props.fgEventSegs, colCnt)\n    let bgEventSegsByRow = this.splitBgEventSegs(props.bgEventSegs, colCnt)\n    let businessHourSegsByRow = this.splitBusinessHourSegs(props.businessHourSegs, colCnt)\n    let nowIndicatorSegsByRow = this.splitNowIndicatorSegs(props.nowIndicatorSegs, colCnt)\n    let dateSelectionSegsByRow = this.splitDateSelectionSegs(props.dateSelectionSegs, colCnt)\n    let eventDragByRow = this.splitEventDrag(props.eventDrag, colCnt)\n    let eventResizeByRow = this.splitEventResize(props.eventResize, colCnt)\n\n    return (\n      <div className=\"fc-timegrid-cols\" ref={this.rootElRef}>\n        <table\n          role=\"presentation\"\n          style={{\n            minWidth: props.tableMinWidth,\n            width: props.clientWidth,\n          }}\n        >\n          {props.tableColGroupNode}\n          <tbody role=\"presentation\">\n            <tr role=\"row\">\n              {props.axis && (\n                <td aria-hidden className=\"fc-timegrid-col fc-timegrid-axis\">\n                  <div className=\"fc-timegrid-col-frame\">\n                    <div className=\"fc-timegrid-now-indicator-container\">\n                      {typeof nowIndicatorTop === 'number' && (\n                        <NowIndicatorRoot isAxis date={props.nowDate}>\n                          {(rootElRef, classNames, innerElRef, innerContent) => (\n                            <div\n                              ref={rootElRef}\n                              className={['fc-timegrid-now-indicator-arrow'].concat(classNames).join(' ')}\n                              style={{ top: nowIndicatorTop }}\n                            >\n                              {innerContent}\n                            </div>\n                          )}\n                        </NowIndicatorRoot>\n                      )}\n                    </div>\n                  </div>\n                </td>\n              )}\n              {props.cells.map((cell, i) => (\n                <TimeCol\n                  key={cell.key}\n                  elRef={this.cellElRefs.createRef(cell.key)}\n                  dateProfile={props.dateProfile}\n                  date={cell.date}\n                  nowDate={props.nowDate}\n                  todayRange={props.todayRange}\n                  extraHookProps={cell.extraHookProps}\n                  extraDataAttrs={cell.extraDataAttrs}\n                  extraClassNames={cell.extraClassNames}\n                  extraDateSpan={cell.extraDateSpan}\n                  fgEventSegs={fgEventSegsByRow[i]}\n                  bgEventSegs={bgEventSegsByRow[i]}\n                  businessHourSegs={businessHourSegsByRow[i]}\n                  nowIndicatorSegs={nowIndicatorSegsByRow[i]}\n                  dateSelectionSegs={dateSelectionSegsByRow[i]}\n                  eventDrag={eventDragByRow[i]}\n                  eventResize={eventResizeByRow[i]}\n                  slatCoords={props.slatCoords}\n                  eventSelection={props.eventSelection}\n                  forPrint={props.forPrint}\n                />\n              ))}\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    )\n  }\n\n  componentDidMount() {\n    this.updateCoords()\n  }\n\n  componentDidUpdate() {\n    this.updateCoords()\n  }\n\n  updateCoords() {\n    let { props } = this\n\n    if (\n      props.onColCoords &&\n      props.clientWidth !== null // means sizing has stabilized\n    ) {\n      props.onColCoords(\n        new PositionCache(\n          this.rootElRef.current,\n          collectCellEls(this.cellElRefs.currentMap, props.cells),\n          true, // horizontal\n          false,\n        ),\n      )\n    }\n  }\n}\n\nfunction collectCellEls(elMap: { [key: string]: HTMLElement }, cells: DayTableCell[]) {\n  return cells.map((cell) => elMap[cell.key])\n}\n", "import {\n  createElement, VNode,\n  addDurations,\n  multiplyDuration,\n  wholeDivideDurations,\n  DateMarker,\n  EventSegUiInteractionState,\n  memoize,\n  CssDimValue,\n  PositionCache,\n  ScrollResponder,\n  ScrollRequest,\n  DateRange,\n  Duration,\n  DateProfile,\n  DayTableCell,\n  Hit,\n  DateComponent,\n} from '@fullcalendar/common'\nimport { TimeColsSlats } from './TimeColsSlats'\nimport { TimeSlatMeta } from './time-slat-meta'\nimport { TimeColsContent } from './TimeColsContent'\nimport { TimeColsSlatsCoords } from './TimeColsSlatsCoords'\nimport { TimeColsSeg } from './TimeColsSeg'\n\nexport interface TimeColsProps {\n  cells: DayTableCell[]\n  dateProfile: DateProfile\n  slotDuration: Duration\n  nowDate: DateMarker\n  todayRange: DateRange\n  businessHourSegs: TimeColsSeg[]\n  bgEventSegs: TimeColsSeg[]\n  fgEventSegs: TimeColsSeg[]\n  dateSelectionSegs: TimeColsSeg[]\n  eventSelection: string\n  eventDrag: EventSegUiInteractionState | null\n  eventResize: EventSegUiInteractionState | null\n  tableColGroupNode: VNode\n  tableMinWidth: CssDimValue\n  clientWidth: number | null\n  clientHeight: number | null\n  expandRows: boolean\n  nowIndicatorSegs: TimeColsSeg[]\n  onScrollTopRequest?: (scrollTop: number) => void\n  forPrint: boolean\n  axis: boolean\n  slatMetas: TimeSlatMeta[]\n  onSlatCoords?: (slatCoords: TimeColsSlatsCoords) => void\n  isHitComboAllowed?: (hit0: Hit, hit1: Hit) => boolean\n}\n\ninterface TimeColsState {\n  slatCoords: TimeColsSlatsCoords | null\n}\n\n/* A component that renders one or more columns of vertical time slots\n----------------------------------------------------------------------------------------------------------------------*/\n\nexport class TimeCols extends DateComponent<TimeColsProps, TimeColsState> {\n  private processSlotOptions = memoize(processSlotOptions)\n  private scrollResponder: ScrollResponder\n  private colCoords: PositionCache\n\n  state = {\n    slatCoords: null,\n  }\n\n  render() {\n    let { props, state } = this\n\n    return (\n      <div\n        className=\"fc-timegrid-body\"\n        ref={this.handleRootEl}\n        style={{\n          // these props are important to give this wrapper correct dimensions for interactions\n          // TODO: if we set it here, can we avoid giving to inner tables?\n          width: props.clientWidth,\n          minWidth: props.tableMinWidth,\n        }}\n      >\n        <TimeColsSlats\n          axis={props.axis}\n          dateProfile={props.dateProfile}\n          slatMetas={props.slatMetas}\n          clientWidth={props.clientWidth}\n          minHeight={props.expandRows ? props.clientHeight : ''}\n          tableMinWidth={props.tableMinWidth}\n          tableColGroupNode={props.axis ? props.tableColGroupNode : null /* axis depends on the colgroup's shrinking */}\n          onCoords={this.handleSlatCoords}\n        />\n        <TimeColsContent\n          cells={props.cells}\n          axis={props.axis}\n          dateProfile={props.dateProfile}\n          businessHourSegs={props.businessHourSegs}\n          bgEventSegs={props.bgEventSegs}\n          fgEventSegs={props.fgEventSegs}\n          dateSelectionSegs={props.dateSelectionSegs}\n          eventSelection={props.eventSelection}\n          eventDrag={props.eventDrag}\n          eventResize={props.eventResize}\n          todayRange={props.todayRange}\n          nowDate={props.nowDate}\n          nowIndicatorSegs={props.nowIndicatorSegs}\n          clientWidth={props.clientWidth}\n          tableMinWidth={props.tableMinWidth}\n          tableColGroupNode={props.tableColGroupNode}\n          slatCoords={state.slatCoords}\n          onColCoords={this.handleColCoords}\n          forPrint={props.forPrint}\n        />\n      </div>\n    )\n  }\n\n  handleRootEl = (el: HTMLElement | null) => {\n    if (el) {\n      this.context.registerInteractiveComponent(this, {\n        el,\n        isHitComboAllowed: this.props.isHitComboAllowed,\n      })\n    } else {\n      this.context.unregisterInteractiveComponent(this)\n    }\n  }\n\n  componentDidMount() {\n    this.scrollResponder = this.context.createScrollResponder(this.handleScrollRequest)\n  }\n\n  componentDidUpdate(prevProps: TimeColsProps) {\n    this.scrollResponder.update(prevProps.dateProfile !== this.props.dateProfile)\n  }\n\n  componentWillUnmount() {\n    this.scrollResponder.detach()\n  }\n\n  handleScrollRequest = (request: ScrollRequest) => {\n    let { onScrollTopRequest } = this.props\n    let { slatCoords } = this.state\n\n    if (onScrollTopRequest && slatCoords) {\n      if (request.time) {\n        let top = slatCoords.computeTimeTop(request.time)\n        top = Math.ceil(top) // zoom can give weird floating-point values. rather scroll a little bit further\n        if (top) {\n          top += 1 // to overcome top border that slots beyond the first have. looks better\n        }\n\n        onScrollTopRequest(top)\n      }\n\n      return true\n    }\n\n    return false\n  }\n\n  handleColCoords = (colCoords: PositionCache | null) => {\n    this.colCoords = colCoords\n  }\n\n  handleSlatCoords = (slatCoords: TimeColsSlatsCoords | null) => {\n    this.setState({ slatCoords })\n\n    if (this.props.onSlatCoords) {\n      this.props.onSlatCoords(slatCoords)\n    }\n  }\n\n  queryHit(positionLeft: number, positionTop: number): Hit {\n    let { dateEnv, options } = this.context\n    let { colCoords } = this\n    let { dateProfile } = this.props\n    let { slatCoords } = this.state\n    let { snapDuration, snapsPerSlot } = this.processSlotOptions(this.props.slotDuration, options.snapDuration)\n\n    let colIndex = colCoords.leftToIndex(positionLeft)\n    let slatIndex = slatCoords.positions.topToIndex(positionTop)\n\n    if (colIndex != null && slatIndex != null) {\n      let cell = this.props.cells[colIndex]\n      let slatTop = slatCoords.positions.tops[slatIndex]\n      let slatHeight = slatCoords.positions.getHeight(slatIndex)\n      let partial = (positionTop - slatTop) / slatHeight // floating point number between 0 and 1\n      let localSnapIndex = Math.floor(partial * snapsPerSlot) // the snap # relative to start of slat\n      let snapIndex = slatIndex * snapsPerSlot + localSnapIndex\n\n      let dayDate = this.props.cells[colIndex].date\n      let time = addDurations(\n        dateProfile.slotMinTime,\n        multiplyDuration(snapDuration, snapIndex),\n      )\n\n      let start = dateEnv.add(dayDate, time)\n      let end = dateEnv.add(start, snapDuration)\n\n      return {\n        dateProfile,\n        dateSpan: {\n          range: { start, end },\n          allDay: false,\n          ...cell.extraDateSpan,\n        },\n        dayEl: colCoords.els[colIndex],\n        rect: {\n          left: colCoords.lefts[colIndex],\n          right: colCoords.rights[colIndex],\n          top: slatTop,\n          bottom: slatTop + slatHeight,\n        },\n        layer: 0,\n      }\n    }\n\n    return null\n  }\n}\n\nfunction processSlotOptions(slotDuration: Duration, snapDurationOverride: Duration | null) {\n  let snapDuration = snapDurationOverride || slotDuration\n  let snapsPerSlot = wholeDivideDurations(slotDuration, snapDuration)\n\n  if (snapsPerSlot === null) {\n    snapDuration = slotDuration\n    snapsPerSlot = 1\n    // TODO: say warning?\n  }\n\n  return { snapDuration, snapsPerSlot }\n}\n", "import { intersectRanges, DateRange, Slicer } from '@fullcalendar/common'\nimport { TimeColsSeg } from './TimeColsSeg'\n\nexport class DayTimeColsSlicer extends Slicer<TimeColsSeg, [DateRange[]]> {\n  sliceRange(range: DateRange, dayRanges: DateRange[]): TimeColsSeg[] {\n    let segs: TimeColsSeg[] = []\n\n    for (let col = 0; col < dayRanges.length; col += 1) {\n      let segRange = intersectRanges(range, dayRanges[col])\n\n      if (segRange) {\n        segs.push({\n          start: segRange.start,\n          end: segRange.end,\n          isStart: segRange.start.valueOf() === range.start.valueOf(),\n          isEnd: segRange.end.valueOf() === range.end.valueOf(),\n          col,\n        })\n      }\n    }\n\n    return segs\n  }\n}\n", "import {\n  createElement,\n  createRef,\n  VNode,\n  DateComponent,\n  DateProfile,\n  EventStore,\n  EventUiHash,\n  EventInteractionState,\n  DateSpan,\n  memoize,\n  DateRange,\n  DayTableModel,\n  DateEnv,\n  DateMarker,\n  NowTimer,\n  CssDimValue,\n  Duration,\n} from '@fullcalendar/common'\nimport { TimeCols } from './TimeCols'\nimport { TimeSlatMeta } from './time-slat-meta'\nimport { TimeColsSlatsCoords } from './TimeColsSlatsCoords'\nimport { DayTimeColsSlicer } from './DayTimeColsSlicer'\n\nexport interface DayTimeColsProps {\n  dateProfile: DateProfile\n  dayTableModel: DayTableModel\n  axis: boolean\n  slotDuration: Duration\n  slatMetas: TimeSlatMeta[]\n  businessHours: EventStore\n  eventStore: EventStore\n  eventUiBases: EventUiHash\n  dateSelection: DateSpan | null\n  eventSelection: string\n  eventDrag: EventInteractionState | null\n  eventResize: EventInteractionState | null\n  tableColGroupNode: VNode\n  tableMinWidth: CssDimValue\n  clientWidth: number | null\n  clientHeight: number | null\n  expandRows: boolean\n  onScrollTopRequest?: (scrollTop: number) => void\n  forPrint: boolean\n  onSlatCoords?: (slatCoords: TimeColsSlatsCoords) => void\n}\n\nexport class DayTimeCols extends DateComponent<DayTimeColsProps> {\n  private buildDayRanges = memoize(buildDayRanges)\n  private slicer = new DayTimeColsSlicer()\n  private timeColsRef = createRef<TimeCols>()\n\n  render() {\n    let { props, context } = this\n    let { dateProfile, dayTableModel } = props\n\n    let isNowIndicator = context.options.nowIndicator\n    let dayRanges = this.buildDayRanges(dayTableModel, dateProfile, context.dateEnv)\n\n    // give it the first row of cells\n    // TODO: would move this further down hierarchy, but sliceNowDate needs it\n    return (\n      <NowTimer unit={isNowIndicator ? 'minute' : 'day'}>\n        {(nowDate: DateMarker, todayRange: DateRange) => (\n          <TimeCols\n            ref={this.timeColsRef}\n            {...this.slicer.sliceProps(props, dateProfile, null, context, dayRanges)}\n            forPrint={props.forPrint}\n            axis={props.axis}\n            dateProfile={dateProfile}\n            slatMetas={props.slatMetas}\n            slotDuration={props.slotDuration}\n            cells={dayTableModel.cells[0]}\n            tableColGroupNode={props.tableColGroupNode}\n            tableMinWidth={props.tableMinWidth}\n            clientWidth={props.clientWidth}\n            clientHeight={props.clientHeight}\n            expandRows={props.expandRows}\n            nowDate={nowDate}\n            nowIndicatorSegs={isNowIndicator && this.slicer.sliceNowDate(nowDate, context, dayRanges)}\n            todayRange={todayRange}\n            onScrollTopRequest={props.onScrollTopRequest}\n            onSlatCoords={props.onSlatCoords}\n          />\n        )}\n      </NowTimer>\n    )\n  }\n}\n\nexport function buildDayRanges(dayTableModel: DayTableModel, dateProfile: DateProfile, dateEnv: DateEnv): DateRange[] {\n  let ranges: DateRange[] = []\n\n  for (let date of dayTableModel.headerDates) {\n    ranges.push({\n      start: dateEnv.add(date, dateProfile.slotMinTime),\n      end: dateEnv.add(date, dateProfile.slotMaxTime),\n    })\n  }\n\n  return ranges\n}\n", "import {\n  createDuration,\n  asRoughMs,\n  formatIsoTimeString,\n  addDurations,\n  wholeDivideDurations,\n  Duration,\n  DateMarker,\n  DateEnv,\n} from '@fullcalendar/common'\n\nexport interface TimeSlatMeta {\n  date: DateMarker\n  time: Duration\n  key: string\n  isoTimeStr: string\n  isLabeled: boolean\n}\n\n// potential nice values for the slot-duration and interval-duration\n// from largest to smallest\nconst STOCK_SUB_DURATIONS = [\n  { hours: 1 },\n  { minutes: 30 },\n  { minutes: 15 },\n  { seconds: 30 },\n  { seconds: 15 },\n]\n\nexport function buildSlatMetas(\n  slotMinTime: Duration,\n  slotMaxTime: Duration,\n  explicitLabelInterval: Duration | null,\n  slotDuration: Duration,\n  dateEnv: DateEnv,\n) {\n  let dayStart = new Date(0)\n  let slatTime = slotMinTime\n  let slatIterator = createDuration(0)\n  let labelInterval = explicitLabelInterval || computeLabelInterval(slotDuration)\n  let metas: TimeSlatMeta[] = []\n\n  while (asRoughMs(slatTime) < asRoughMs(slotMaxTime)) {\n    let date = dateEnv.add(dayStart, slatTime)\n    let isLabeled = wholeDivideDurations(slatIterator, labelInterval) !== null\n\n    metas.push({\n      date,\n      time: slatTime,\n      key: date.toISOString(), // we can't use the isoTimeStr for uniqueness when minTime/maxTime beyone 0h/24h\n      isoTimeStr: formatIsoTimeString(date),\n      isLabeled,\n    })\n\n    slatTime = addDurations(slatTime, slotDuration)\n    slatIterator = addDurations(slatIterator, slotDuration)\n  }\n\n  return metas\n}\n\n// Computes an automatic value for slotLabelInterval\nfunction computeLabelInterval(slotDuration) {\n  let i\n  let labelInterval\n  let slotsPerLabel\n\n  // find the smallest stock label interval that results in more than one slots-per-label\n  for (i = STOCK_SUB_DURATIONS.length - 1; i >= 0; i -= 1) {\n    labelInterval = createDuration(STOCK_SUB_DURATIONS[i])\n    slotsPerLabel = wholeDivideDurations(labelInterval, slotDuration)\n    if (slotsPerLabel !== null && slotsPerLabel > 1) {\n      return labelInterval\n    }\n  }\n\n  return slotDuration // fall back\n}\n", "import {\n  createElement,\n  DateProfileGenerator, DateProfile,\n  DayHeader,\n  DaySeriesModel,\n  DayTableModel,\n  memoize,\n  ChunkContentCallbackArgs,\n} from '@fullcalendar/common'\nimport { DayTable } from '@fullcalendar/daygrid'\nimport { TimeColsView } from './TimeColsView'\nimport { DayTimeCols } from './DayTimeCols'\nimport { buildSlatMetas } from './time-slat-meta'\n\nexport class DayTimeColsView extends TimeColsView {\n  private buildTimeColsModel = memoize(buildTimeColsModel)\n  private buildSlatMetas = memoize(buildSlatMetas)\n\n  render() {\n    let { options, dateEnv, dateProfileGenerator } = this.context\n    let { props } = this\n    let { dateProfile } = props\n    let dayTableModel = this.buildTimeColsModel(dateProfile, dateProfileGenerator)\n    let splitProps = this.allDaySplitter.splitProps(props)\n    let slatMetas = this.buildSlatMetas(\n      dateProfile.slotMinTime,\n      dateProfile.slotMaxTime,\n      options.slotLabelInterval,\n      options.slotDuration,\n      dateEnv,\n    )\n    let { dayMinWidth } = options\n    let hasAttachedAxis = !dayMinWidth\n    let hasDetachedAxis = dayMinWidth\n\n    let headerContent = options.dayHeaders && (\n      <DayHeader\n        dates={dayTableModel.headerDates}\n        dateProfile={dateProfile}\n        datesRepDistinctDays\n        renderIntro={hasAttachedAxis ? this.renderHeadAxis : null}\n      />\n    )\n\n    let allDayContent = (options.allDaySlot !== false) && ((contentArg: ChunkContentCallbackArgs) => (\n      <DayTable\n        {...splitProps.allDay}\n        dateProfile={dateProfile}\n        dayTableModel={dayTableModel}\n        nextDayThreshold={options.nextDayThreshold}\n        tableMinWidth={contentArg.tableMinWidth}\n        colGroupNode={contentArg.tableColGroupNode}\n        renderRowIntro={hasAttachedAxis ? this.renderTableRowAxis : null}\n        showWeekNumbers={false}\n        expandRows={false}\n        headerAlignElRef={this.headerElRef}\n        clientWidth={contentArg.clientWidth}\n        clientHeight={contentArg.clientHeight}\n        forPrint={props.forPrint}\n        {...this.getAllDayMaxEventProps()}\n      />\n    ))\n\n    let timeGridContent = (contentArg: ChunkContentCallbackArgs) => (\n      <DayTimeCols\n        {...splitProps.timed}\n        dayTableModel={dayTableModel}\n        dateProfile={dateProfile}\n        axis={hasAttachedAxis}\n        slotDuration={options.slotDuration}\n        slatMetas={slatMetas}\n        forPrint={props.forPrint}\n        tableColGroupNode={contentArg.tableColGroupNode}\n        tableMinWidth={contentArg.tableMinWidth}\n        clientWidth={contentArg.clientWidth}\n        clientHeight={contentArg.clientHeight}\n        onSlatCoords={this.handleSlatCoords}\n        expandRows={contentArg.expandRows}\n        onScrollTopRequest={this.handleScrollTopRequest}\n      />\n    )\n\n    return hasDetachedAxis\n      ? this.renderHScrollLayout(\n        headerContent,\n        allDayContent,\n        timeGridContent,\n        dayTableModel.colCnt,\n        dayMinWidth,\n        slatMetas,\n        this.state.slatCoords,\n      )\n      : this.renderSimpleLayout(\n        headerContent,\n        allDayContent,\n        timeGridContent,\n      )\n  }\n}\n\nexport function buildTimeColsModel(dateProfile: DateProfile, dateProfileGenerator: DateProfileGenerator) {\n  let daySeries = new DaySeriesModel(dateProfile.renderRange, dateProfileGenerator)\n\n  return new DayTableModel(daySeries, false)\n}\n", "export const OPTION_REFINERS = {\n  allDaySlot: Boolean,\n}\n", "import { createPlugin } from '@fullcalendar/common'\nimport { TimeColsView } from './TimeColsView'\nimport { DayTimeColsView, buildTimeColsModel } from './DayTimeColsView'\nimport { TimeColsSeg } from './TimeColsSeg'\nimport { DayTimeCols, buildDayRanges } from './DayTimeCols'\nimport { DayTimeColsSlicer } from './DayTimeColsSlicer'\nimport { OPTION_REFINERS } from './options'\nimport './options-declare'\nimport './main.css'\n\nexport { DayTimeCols, DayTimeColsView, TimeColsView, buildTimeColsModel, buildDayRanges, DayTimeColsSlicer, TimeColsSeg }\nexport { TimeCols } from './TimeCols'\nexport { TimeSlatMeta, buildSlatMetas } from './time-slat-meta'\nexport { TimeColsSlatsCoords } from './TimeColsSlatsCoords'\n\nexport default createPlugin({\n  initialView: 'timeGridWeek',\n  optionRefiners: OPTION_REFINERS,\n  views: {\n\n    timeGrid: {\n      component: DayTimeColsView,\n      usesMinMaxTime: true, // indicates that slotMinTime/slotMaxTime affects rendering\n      allDaySlot: true,\n      slotDuration: '00:30:00',\n      slotEventOverlap: true, // a bad name. confused with overlap/constraint system\n    },\n\n    timeGridDay: {\n      type: 'timeGrid',\n      duration: { days: 1 },\n    },\n\n    timeGridWeek: {\n      type: 'timeGrid',\n      duration: { weeks: 1 },\n    },\n\n  },\n})\n"],
  "mappings": "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",
  "names": ["AllDaySplitter", "TimeBodyAxis", "TimeColsView", "TimeColsSlatsCoords", "TimeColsSlatsBody", "TimeColsSlats", "TimeColMoreLink", "TimeColEvent", "TimeColMisc", "TimeCol", "TimeColsContent", "TimeCols", "DayTimeColsSlicer", "DayTimeCols", "DayTimeColsView"]
}
