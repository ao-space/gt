{
  "version": 3,
  "sources": ["../../@fullcalendar/core/src/Calendar.tsx", "../../@fullcalendar/vue3/src/options.ts", "../../@fullcalendar/vue3/src/utils.ts", "../../@fullcalendar/vue3/src/custom-content-type.ts", "../../@fullcalendar/vue3/src/FullCalendar.ts", "../../@fullcalendar/vue3/src/main.ts"],
  "sourcesContent": ["import {\n  CalendarOptions, Action, CalendarContent, render, createElement, DelayedRunner, CssDimValue, applyStyleProp,\n  CalendarApi, CalendarRoot, isArraysEqual, CalendarDataManager, CalendarData,\n  CustomContentRenderContext, flushSync, unmountComponentAtNode,\n} from '@fullcalendar/common'\n\nexport class Calendar extends CalendarApi {\n  currentData: CalendarData\n  renderRunner: DelayedRunner\n  el: HTMLElement\n  isRendering = false\n  isRendered = false\n  currentClassNames: string[] = []\n  customContentRenderId = 0 // will affect custom generated classNames?\n\n  get view() { return this.currentData.viewApi } // for public API\n\n  constructor(el: HTMLElement, optionOverrides: CalendarOptions = {}) {\n    super()\n\n    this.el = el\n    this.renderRunner = new DelayedRunner(this.handleRenderRequest)\n\n    new CalendarDataManager({ // eslint-disable-line no-new\n      optionOverrides,\n      calendarApi: this,\n      onAction: this.handleAction,\n      onData: this.handleData,\n    })\n  }\n\n  handleAction = (action: Action) => {\n    // actions we know we want to render immediately\n    switch (action.type) {\n      case 'SET_EVENT_DRAG':\n      case 'SET_EVENT_RESIZE':\n        this.renderRunner.tryDrain()\n    }\n  }\n\n  handleData = (data: CalendarData) => {\n    this.currentData = data\n    this.renderRunner.request(data.calendarOptions.rerenderDelay)\n  }\n\n  handleRenderRequest = () => {\n    if (this.isRendering) {\n      this.isRendered = true\n      let { currentData } = this\n\n      flushSync(() => {\n        render(\n          <CalendarRoot options={currentData.calendarOptions} theme={currentData.theme} emitter={currentData.emitter}>\n            {(classNames, height, isHeightAuto, forPrint) => {\n              this.setClassNames(classNames)\n              this.setHeight(height)\n\n              return (\n                <CustomContentRenderContext.Provider value={this.customContentRenderId}>\n                  <CalendarContent\n                    isHeightAuto={isHeightAuto}\n                    forPrint={forPrint}\n                    {...currentData}\n                  />\n                </CustomContentRenderContext.Provider>\n              )\n            }}\n          </CalendarRoot>,\n          this.el,\n        )\n      })\n    } else if (this.isRendered) {\n      this.isRendered = false\n      unmountComponentAtNode(this.el)\n      this.setClassNames([])\n      this.setHeight('')\n    }\n  }\n\n  render() {\n    let wasRendering = this.isRendering\n\n    if (!wasRendering) {\n      this.isRendering = true\n    } else {\n      this.customContentRenderId += 1\n    }\n\n    this.renderRunner.request()\n\n    if (wasRendering) {\n      this.updateSize()\n    }\n  }\n\n  destroy() {\n    if (this.isRendering) {\n      this.isRendering = false\n      this.renderRunner.request()\n    }\n  }\n\n  updateSize() {\n    flushSync(() => {\n      super.updateSize()\n    })\n  }\n\n  batchRendering(func) {\n    this.renderRunner.pause('batchRendering')\n    func()\n    this.renderRunner.resume('batchRendering')\n  }\n\n  pauseRendering() { // available to plugins\n    this.renderRunner.pause('pauseRendering')\n  }\n\n  resumeRendering() { // available to plugins\n    this.renderRunner.resume('pauseRendering', true)\n  }\n\n  resetOptions(optionOverrides, append?) {\n    this.currentDataManager.resetOptions(optionOverrides, append)\n  }\n\n  setClassNames(classNames: string[]) {\n    if (!isArraysEqual(classNames, this.currentClassNames)) {\n      let { classList } = this.el\n\n      for (let className of this.currentClassNames) {\n        classList.remove(className)\n      }\n\n      for (let className of classNames) {\n        classList.add(className)\n      }\n\n      this.currentClassNames = classNames\n    }\n  }\n\n  setHeight(height: CssDimValue) {\n    applyStyleProp(this.el, 'height', height)\n  }\n}\n", "\nexport const OPTION_IS_COMPLEX: { [name: string]: boolean } = {\n  headerToolbar: true,\n  footerToolbar: true,\n  events: true,\n  eventSources: true,\n  resources: true\n}\n", "\n// TODO: add types!\n\n\n/*\nworks with objects and arrays\n*/\nexport function shallowCopy(val: any) {\n  if (typeof val === 'object') {\n    if (Array.isArray(val)) {\n      val = Array.prototype.slice.call(val)\n    } else if (val) { // non-null\n      val = { ...val }\n    }\n  }\n\n  return val\n}\n\n\nexport function mapHash(input: any, func: any) {\n  const output: any = {}\n\n  for (const key in input) {\n    if (input.hasOwnProperty(key)) {\n      output[key] = func(input[key], key)\n    }\n  }\n\n  return output\n}\n", "import { App, createApp, ComponentPublicInstance, VNode, Slot, h, AppContext } from 'vue'\nimport { createPlugin, PluginDef } from '@fullcalendar/core'\n\ninterface RootComponentData {\n  content: VNode[]\n}\ntype RootComponentInstance = ComponentPublicInstance<{}, {}, RootComponentData>\n\n/*\nwrap it in an object with a `vue` key, which the custom content-type handler system will look for\n*/\nexport function wrapVDomGenerator(vDomGenerator: Slot) {\n  return function(props: any) {\n    return { vue: vDomGenerator(props) }\n  }\n}\n\nexport function createVueContentTypePlugin(appContext: AppContext): PluginDef {\n  return createPlugin({\n    contentTypeHandlers: {\n      vue: () => buildVDomHandler(appContext), // looks for the `vue` key\n    }\n  })\n}\n\nfunction buildVDomHandler(appContext: AppContext) {\n  let currentEl: HTMLElement\n  let app: App\n  let componentInstance: RootComponentInstance\n\n  function render(el: HTMLElement, vDomContent: VNode[]) { // the handler\n    if (currentEl !== el) {\n      if (currentEl && app) { // if changing elements, recreate the vue\n        app.unmount()\n      }\n      currentEl = el\n    }\n\n    if (!app) {\n      app = initApp(vDomContent, appContext)\n\n      // vue's mount method *replaces* the given element. create an artificial inner el\n      let innerEl = document.createElement('span')\n      el.appendChild(innerEl)\n\n      componentInstance = app.mount(innerEl) as RootComponentInstance\n    } else {\n      componentInstance.content = vDomContent\n    }\n  }\n\n  function destroy() {\n    if (app) { // needed?\n      app.unmount()\n    }\n  }\n\n  return { render, destroy }\n}\n\nfunction initApp(initialContent: VNode[], appContext: AppContext): App {\n  // TODO: do something with appContext\n  return createApp({\n    data() {\n      return {\n        content: initialContent,\n      } as RootComponentData\n    },\n    render() {\n      let { content } = this\n\n      // the slot result can be an array, but the returned value of a vue component's\n      // render method must be a single node.\n      if (content.length === 1) {\n        return content[0]\n      } else {\n        return h('span', {}, content)\n      }\n    }\n  })\n}\n", "import { PropType, defineComponent, h, Slots, AppContext } from 'vue'\nimport { Calendar, CalendarOptions } from '@fullcalendar/core'\nimport { OPTION_IS_COMPLEX } from './options'\nimport { shallowCopy, mapHash } from './utils'\nimport { wrapVDomGenerator, createVueContentTypePlugin } from './custom-content-type'\n\nconst FullCalendar = defineComponent({\n\n  props: {\n    options: Object as PropType<CalendarOptions>\n  },\n\n  data: initData, // separate func b/c of type inferencing\n\n  render() {\n    return h('div', {\n      // when renderId is changed, Vue will trigger a real-DOM async rerender, calling beforeUpdate/updated\n      attrs: { 'data-fc-render-id': this.renderId }\n    })\n  },\n\n  mounted() {\n    // store internal data (slotOptions, calendar)\n    // https://github.com/vuejs/vue/issues/1988#issuecomment-163013818\n    (this as any).slotOptions = mapHash(this.$slots, wrapVDomGenerator) // needed for buildOptions\n    let calendarOptions = this.buildOptions(this.options, this.$.appContext)\n    let calendar = new Calendar(this.$el as HTMLElement, calendarOptions)\n    ;(this as any).calendar = calendar\n    calendar.render()\n  },\n\n  methods: { // separate funcs b/c of type inferencing\n    getApi,\n    buildOptions,\n  },\n\n  beforeUpdate() {\n    this.getApi().resumeRendering() // the watcher handlers paused it\n  },\n\n  beforeUnmount() {\n    this.getApi().destroy()\n  },\n\n  watch: buildWatchers()\n})\n\nexport default FullCalendar\n\n\nfunction initData() {\n  return {\n    renderId: 0\n  }\n}\n\n\nfunction buildOptions(\n  this: any,\n  suppliedOptions: CalendarOptions | undefined,\n  appContext: AppContext,\n): CalendarOptions {\n  suppliedOptions = suppliedOptions || {}\n  return {\n    ...this.slotOptions,\n    ...suppliedOptions, // spread will pull out the values from the options getter functions\n    plugins: (suppliedOptions.plugins || []).concat([\n      createVueContentTypePlugin(appContext)\n    ])\n  }\n}\n\n\nfunction getApi(this: any) {\n  return this.calendar\n}\n\n\ntype FullCalendarInstance = InstanceType<typeof FullCalendar>\n\n\nfunction buildWatchers() {\n\n  let watchers: { [member: string]: any } = {\n\n    // watches changes of ALL options and their nested objects,\n    // but this is only a means to be notified of top-level non-complex options changes.\n    options: {\n      deep: true,\n      handler(this: FullCalendarInstance, options: CalendarOptions) {\n        let calendar = this.getApi()\n        calendar.pauseRendering()\n\n        let calendarOptions = this.buildOptions(options, this.$.appContext)\n        calendar.resetOptions(calendarOptions)\n\n        this.renderId++ // will queue a rerender\n      }\n    }\n  }\n\n  for (let complexOptionName in OPTION_IS_COMPLEX) {\n\n    // handlers called when nested objects change\n    watchers[`options.${complexOptionName}`] = {\n      deep: true,\n      handler(this: FullCalendarInstance, val: any) {\n\n        // unfortunately the handler is called with undefined if new props were set, but the complex one wasn't ever set\n        if (val !== undefined) {\n\n          let calendar = this.getApi()\n          calendar.pauseRendering()\n          calendar.resetOptions({\n            // the only reason we shallow-copy is to trick FC into knowing there's a nested change.\n            // TODO: future versions of FC will more gracefully handle event option-changes that are same-reference.\n            [complexOptionName]: shallowCopy(val)\n          }, true)\n\n          this.renderId++ // will queue a rerender\n        }\n      }\n    }\n  }\n\n  return watchers\n}\n", "import FullCalendarComponent from './FullCalendar'\n\nexport default FullCalendarComponent\n\n// so can access any of the utils/types from this lib\nexport * from '@fullcalendar/core'\n"],
  "mappings": "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",
  "names": ["Calendar", "mapHash", "render", "mapHash"]
}
