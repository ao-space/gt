{
  "version": 3,
  "sources": ["../../@fullcalendar/daygrid/src/TableView.tsx", "../../@fullcalendar/daygrid/src/TableSeg.ts", "../../@fullcalendar/daygrid/src/TableCellTop.tsx", "../../@fullcalendar/daygrid/src/event-rendering.ts", "../../@fullcalendar/daygrid/src/TableBlockEvent.tsx", "../../@fullcalendar/daygrid/src/TableListItemEvent.tsx", "../../@fullcalendar/daygrid/src/TableCellMoreLink.tsx", "../../@fullcalendar/daygrid/src/TableCell.tsx", "../../@fullcalendar/daygrid/src/event-placement.ts", "../../@fullcalendar/daygrid/src/TableRow.tsx", "../../@fullcalendar/daygrid/src/Table.tsx", "../../@fullcalendar/daygrid/src/DayTableSlicer.tsx", "../../@fullcalendar/daygrid/src/DayTable.tsx", "../../@fullcalendar/daygrid/src/DayTableView.tsx", "../../@fullcalendar/daygrid/src/TableDateProfileGenerator.ts", "../../@fullcalendar/daygrid/src/main.ts"],
  "sourcesContent": ["import {\n  VNode, createElement,\n  SimpleScrollGrid,\n  SimpleScrollGridSection,\n  ChunkContentCallbackArgs,\n  createRef,\n  ScrollGridSectionConfig,\n  ViewRoot,\n  DateComponent,\n  ViewProps,\n  RefObject,\n  renderScrollShim,\n  getStickyHeaderDates,\n  getStickyFooterScrollbar,\n  ChunkConfigRowContent,\n  Dictionary,\n} from '@fullcalendar/common'\n\n/* An abstract class for the daygrid views, as well as month view. Renders one or more rows of day cells.\n----------------------------------------------------------------------------------------------------------------------*/\n// It is a manager for a Table subcomponent, which does most of the heavy lifting.\n// It is responsible for managing width/height.\n\nexport abstract class TableView<State=Dictionary> extends DateComponent<ViewProps, State> {\n  protected headerElRef: RefObject<HTMLTableCellElement> = createRef<HTMLTableCellElement>()\n\n  renderSimpleLayout(\n    headerRowContent: ChunkConfigRowContent,\n    bodyContent: (contentArg: ChunkContentCallbackArgs) => VNode,\n  ) {\n    let { props, context } = this\n    let sections: SimpleScrollGridSection[] = []\n    let stickyHeaderDates = getStickyHeaderDates(context.options)\n\n    if (headerRowContent) {\n      sections.push({\n        type: 'header',\n        key: 'header',\n        isSticky: stickyHeaderDates,\n        chunk: {\n          elRef: this.headerElRef,\n          tableClassName: 'fc-col-header',\n          rowContent: headerRowContent,\n        },\n      })\n    }\n\n    sections.push({\n      type: 'body',\n      key: 'body',\n      liquid: true,\n      chunk: { content: bodyContent },\n    })\n\n    return (\n      <ViewRoot viewSpec={context.viewSpec}>\n        {(rootElRef, classNames) => (\n          <div ref={rootElRef} className={['fc-daygrid'].concat(classNames).join(' ')}>\n            <SimpleScrollGrid\n              liquid={!props.isHeightAuto && !props.forPrint}\n              collapsibleWidth={props.forPrint}\n              cols={[] /* TODO: make optional? */}\n              sections={sections}\n            />\n          </div>\n        )}\n      </ViewRoot>\n    )\n  }\n\n  renderHScrollLayout(\n    headerRowContent: ChunkConfigRowContent,\n    bodyContent: (contentArg: ChunkContentCallbackArgs) => VNode,\n    colCnt: number,\n    dayMinWidth: number,\n  ) {\n    let ScrollGrid = this.context.pluginHooks.scrollGridImpl\n\n    if (!ScrollGrid) {\n      throw new Error('No ScrollGrid implementation')\n    }\n\n    let { props, context } = this\n    let stickyHeaderDates = !props.forPrint && getStickyHeaderDates(context.options)\n    let stickyFooterScrollbar = !props.forPrint && getStickyFooterScrollbar(context.options)\n    let sections: ScrollGridSectionConfig[] = []\n\n    if (headerRowContent) {\n      sections.push({\n        type: 'header',\n        key: 'header',\n        isSticky: stickyHeaderDates,\n        chunks: [{\n          key: 'main',\n          elRef: this.headerElRef,\n          tableClassName: 'fc-col-header',\n          rowContent: headerRowContent,\n        }],\n      })\n    }\n\n    sections.push({\n      type: 'body',\n      key: 'body',\n      liquid: true,\n      chunks: [{\n        key: 'main',\n        content: bodyContent,\n      }],\n    })\n\n    if (stickyFooterScrollbar) {\n      sections.push({\n        type: 'footer',\n        key: 'footer',\n        isSticky: true,\n        chunks: [{\n          key: 'main',\n          content: renderScrollShim,\n        }],\n      })\n    }\n\n    return (\n      <ViewRoot viewSpec={context.viewSpec}>\n        {(rootElRef, classNames) => (\n          <div ref={rootElRef} className={['fc-daygrid'].concat(classNames).join(' ')}>\n            <ScrollGrid\n              liquid={!props.isHeightAuto && !props.forPrint}\n              collapsibleWidth={props.forPrint}\n              colGroups={[{ cols: [{ span: colCnt, minWidth: dayMinWidth }] }]}\n              sections={sections}\n            />\n          </div>\n        )}\n      </ViewRoot>\n    )\n  }\n}\n", "import { EventSegUiInteractionState, Seg } from '@fullcalendar/common'\n\n// this is a DATA STRUCTURE, not a component\n\nexport interface TableSeg extends Seg {\n  row: number\n  firstCol: number\n  lastCol: number\n}\n\nexport function splitSegsByRow(segs: TableSeg[], rowCnt: number) {\n  let byRow: TableSeg[][] = []\n\n  for (let i = 0; i < rowCnt; i += 1) {\n    byRow[i] = []\n  }\n\n  for (let seg of segs) {\n    byRow[seg.row].push(seg)\n  }\n\n  return byRow\n}\n\nexport function splitSegsByFirstCol(segs: TableSeg[], colCnt: number) {\n  let byCol: TableSeg[][] = []\n\n  for (let i = 0; i < colCnt; i += 1) {\n    byCol[i] = []\n  }\n\n  for (let seg of segs) {\n    byCol[seg.firstCol].push(seg)\n  }\n\n  return byCol\n}\n\nexport function splitInteractionByRow(ui: EventSegUiInteractionState | null, rowCnt: number) {\n  let byRow: EventSegUiInteractionState[] = []\n\n  if (!ui) {\n    for (let i = 0; i < rowCnt; i += 1) {\n      byRow[i] = null\n    }\n  } else {\n    for (let i = 0; i < rowCnt; i += 1) {\n      byRow[i] = {\n        affectedInstances: ui.affectedInstances,\n        isEvent: ui.isEvent,\n        segs: [],\n      }\n    }\n\n    for (let seg of ui.segs) {\n      byRow[seg.row].segs.push(seg)\n    }\n  }\n\n  return byRow\n}\n", "import {\n  createElement,\n  DateMarker,\n  DateRange,\n  DayCellContentArg,\n  DayCellContent,\n  BaseComponent,\n  DateProfile,\n  Dictionary,\n  Fragment,\n  buildNavLinkAttrs,\n} from '@fullcalendar/common'\n\ninterface TableCellTopProps {\n  date: DateMarker\n  dateProfile: DateProfile\n  showDayNumber: boolean\n  dayNumberId: string\n  forceDayTop: boolean // hack to force-create an element with height (created by a nbsp)\n  todayRange: DateRange\n  extraHookProps?: Dictionary\n}\n\nexport class TableCellTop extends BaseComponent<TableCellTopProps> {\n  render() {\n    let { props } = this\n    let navLinkAttrs = buildNavLinkAttrs(this.context, props.date)\n\n    return (\n      <DayCellContent\n        date={props.date}\n        dateProfile={props.dateProfile}\n        todayRange={props.todayRange}\n        showDayNumber={props.showDayNumber}\n        extraHookProps={props.extraHookProps}\n        defaultContent={renderTopInner}\n      >\n        {(innerElRef, innerContent) => (\n          (innerContent || props.forceDayTop) && (\n            <div className=\"fc-daygrid-day-top\" ref={innerElRef}>\n              <a\n                id={props.dayNumberId}\n                className=\"fc-daygrid-day-number\"\n                {...navLinkAttrs}\n              >\n                {innerContent || <Fragment>&nbsp;</Fragment>}\n              </a>\n            </div>\n          )\n        )}\n      </DayCellContent>\n    )\n  }\n}\n\nfunction renderTopInner(props: DayCellContentArg) {\n  return props.dayNumberText\n}\n", "import { createFormatter } from '@fullcalendar/common'\nimport { TableSeg } from './TableSeg'\n\nexport const DEFAULT_TABLE_EVENT_TIME_FORMAT = createFormatter({\n  hour: 'numeric',\n  minute: '2-digit',\n  omitZeroMinute: true,\n  meridiem: 'narrow',\n})\n\nexport function hasListItemDisplay(seg: TableSeg) {\n  let { display } = seg.eventRange.ui\n\n  return display === 'list-item' || (\n    display === 'auto' &&\n    !seg.eventRange.def.allDay &&\n    seg.firstCol === seg.lastCol && // can't be multi-day\n    seg.isStart && // \"\n    seg.isEnd // \"\n  )\n}\n", "import { createElement, StandardEvent, BaseComponent, MinimalEventProps } from '@fullcalendar/common'\nimport { DEFAULT_TABLE_EVENT_TIME_FORMAT } from './event-rendering'\n\nexport interface TableBlockEventProps extends MinimalEventProps {\n  defaultDisplayEventEnd: boolean\n}\n\nexport class TableBlockEvent extends BaseComponent<TableBlockEventProps> {\n  render() {\n    let { props } = this\n\n    return (\n      <StandardEvent\n        {...props}\n        extraClassNames={['fc-daygrid-event', 'fc-daygrid-block-event', 'fc-h-event']}\n        defaultTimeFormat={DEFAULT_TABLE_EVENT_TIME_FORMAT}\n        defaultDisplayEventEnd={props.defaultDisplayEventEnd}\n        disableResizing={!props.seg.eventRange.def.allDay}\n      />\n    )\n  }\n}\n", "import {\n  createElement,\n  BaseComponent,\n  Seg,\n  EventRoot,\n  buildSegTimeText,\n  EventContentArg,\n  Fragment,\n  getSegAnchorAttrs,\n} from '@fullcalendar/common'\nimport { DEFAULT_TABLE_EVENT_TIME_FORMAT } from './event-rendering'\n\nexport interface DotTableEventProps {\n  seg: Seg\n  isDragging: boolean\n  isSelected: boolean\n  isPast: boolean\n  isFuture: boolean\n  isToday: boolean\n  defaultDisplayEventEnd: boolean\n}\n\nexport class TableListItemEvent extends BaseComponent<DotTableEventProps> {\n  render() {\n    let { props, context } = this\n    let timeFormat = context.options.eventTimeFormat || DEFAULT_TABLE_EVENT_TIME_FORMAT\n    let timeText = buildSegTimeText(\n      props.seg,\n      timeFormat,\n      context,\n      true,\n      props.defaultDisplayEventEnd,\n    )\n\n    return (\n      <EventRoot\n        seg={props.seg}\n        timeText={timeText}\n        defaultContent={renderInnerContent}\n        isDragging={props.isDragging}\n        isResizing={false}\n        isDateSelecting={false}\n        isSelected={props.isSelected}\n        isPast={props.isPast}\n        isFuture={props.isFuture}\n        isToday={props.isToday}\n      >\n        {(rootElRef, classNames, innerElRef, innerContent) => ( // we don't use styles!\n          <a\n            className={['fc-daygrid-event', 'fc-daygrid-dot-event'].concat(classNames).join(' ')}\n            ref={rootElRef}\n            {...getSegAnchorAttrs(props.seg, context)}\n          >\n            {innerContent}\n          </a>\n        )}\n      </EventRoot>\n    )\n  }\n}\n\nfunction renderInnerContent(innerProps: EventContentArg) {\n  return (\n    <Fragment>\n      <div\n        className=\"fc-daygrid-event-dot\"\n        style={{ borderColor: innerProps.borderColor || innerProps.backgroundColor }}\n      />\n      {innerProps.timeText && (\n        <div className=\"fc-event-time\">{innerProps.timeText}</div>\n      )}\n      <div className=\"fc-event-title\">\n        {innerProps.event.title || <Fragment>&nbsp;</Fragment>}\n      </div>\n    </Fragment>\n  )\n}\n", "import {\n  createElement,\n  MoreLinkRoot,\n  RefObject,\n  BaseComponent,\n  memoize,\n  DateMarker,\n  Dictionary,\n  DateProfile,\n  DateRange,\n  EventSegUiInteractionState,\n  getSegMeta,\n  Fragment,\n  createAriaClickAttrs,\n} from '@fullcalendar/common'\nimport { TableSegPlacement } from './event-placement'\nimport { hasListItemDisplay } from './event-rendering'\nimport { TableBlockEvent } from './TableBlockEvent'\nimport { TableListItemEvent } from './TableListItemEvent'\nimport { TableSeg } from './TableSeg'\n\nexport interface TableCellMoreLinkProps {\n  allDayDate: DateMarker\n  singlePlacements: TableSegPlacement[]\n  moreCnt: number\n  alignmentElRef: RefObject<HTMLElement> // for popover\n  alignGridTop: boolean // for popover\n  extraDateSpan?: Dictionary\n  dateProfile: DateProfile\n  todayRange: DateRange\n  eventSelection: string\n  eventDrag: EventSegUiInteractionState | null\n  eventResize: EventSegUiInteractionState | null\n}\n\nexport class TableCellMoreLink extends BaseComponent<TableCellMoreLinkProps> {\n  compileSegs = memoize(compileSegs)\n\n  render() {\n    let { props } = this\n    let { allSegs, invisibleSegs } = this.compileSegs(props.singlePlacements)\n\n    return (\n      <MoreLinkRoot\n        dateProfile={props.dateProfile}\n        todayRange={props.todayRange}\n        allDayDate={props.allDayDate}\n        moreCnt={props.moreCnt}\n        allSegs={allSegs}\n        hiddenSegs={invisibleSegs}\n        alignmentElRef={props.alignmentElRef}\n        alignGridTop={props.alignGridTop}\n        extraDateSpan={props.extraDateSpan}\n        popoverContent={() => {\n          let isForcedInvisible =\n            (props.eventDrag ? props.eventDrag.affectedInstances : null) ||\n            (props.eventResize ? props.eventResize.affectedInstances : null) ||\n            {}\n          return (\n            <Fragment>\n              {allSegs.map((seg) => {\n                let instanceId = seg.eventRange.instance.instanceId\n                return (\n                  <div\n                    className=\"fc-daygrid-event-harness\"\n                    key={instanceId}\n                    style={{\n                      visibility: isForcedInvisible[instanceId] ? 'hidden' : ('' as any),\n                    }}\n                  >\n                    {hasListItemDisplay(seg) ? (\n                      <TableListItemEvent\n                        seg={seg}\n                        isDragging={false}\n                        isSelected={instanceId === props.eventSelection}\n                        defaultDisplayEventEnd={false}\n                        {...getSegMeta(seg, props.todayRange)}\n                      />\n                    ) : (\n                      <TableBlockEvent\n                        seg={seg}\n                        isDragging={false}\n                        isResizing={false}\n                        isDateSelecting={false}\n                        isSelected={instanceId === props.eventSelection}\n                        defaultDisplayEventEnd={false}\n                        {...getSegMeta(seg, props.todayRange)}\n                      />\n                    )}\n                  </div>\n                )\n              })}\n            </Fragment>\n          )\n        }}\n      >\n        {(rootElRef, classNames, innerElRef, innerContent, handleClick, title, isExpanded, popoverId) => (\n          <a\n            ref={rootElRef}\n            className={['fc-daygrid-more-link'].concat(classNames).join(' ')}\n            title={title}\n            aria-expanded={isExpanded}\n            aria-controls={popoverId}\n            {...createAriaClickAttrs(handleClick)}\n          >\n            {innerContent}\n          </a>\n        )}\n      </MoreLinkRoot>\n    )\n  }\n}\n\nfunction compileSegs(singlePlacements: TableSegPlacement[]): {\n  allSegs: TableSeg[]\n  invisibleSegs: TableSeg[]\n} {\n  let allSegs: TableSeg[] = []\n  let invisibleSegs: TableSeg[] = []\n\n  for (let placement of singlePlacements) {\n    allSegs.push(placement.seg)\n\n    if (!placement.isVisible) {\n      invisibleSegs.push(placement.seg)\n    }\n  }\n\n  return { allSegs, invisibleSegs }\n}\n", "import {\n  Ref,\n  ComponentChildren,\n  createElement,\n  DateMarker,\n  DateComponent,\n  DateRange,\n  buildNavLinkAttrs,\n  WeekNumberRoot,\n  DayCellRoot,\n  DateProfile,\n  setRef,\n  createFormatter,\n  Dictionary,\n  createRef,\n  EventSegUiInteractionState,\n  getUniqueDomId,\n} from '@fullcalendar/common'\nimport { TableCellTop } from './TableCellTop'\nimport { TableCellMoreLink } from './TableCellMoreLink'\nimport { TableSegPlacement } from './event-placement'\n\nexport interface TableCellProps {\n  date: DateMarker\n  dateProfile: DateProfile\n  extraHookProps?: Dictionary\n  extraDataAttrs?: Dictionary\n  extraClassNames?: string[]\n  extraDateSpan?: Dictionary\n  elRef?: Ref<HTMLTableCellElement>\n  innerElRef?: Ref<HTMLDivElement>\n  bgContent: ComponentChildren\n  fgContentElRef?: Ref<HTMLDivElement> // TODO: rename!!! classname confusion. is the \"event\" div\n  fgContent: ComponentChildren\n  moreCnt: number\n  moreMarginTop: number\n  showDayNumber: boolean\n  showWeekNumber: boolean\n  forceDayTop: boolean\n  todayRange: DateRange\n  eventSelection: string\n  eventDrag: EventSegUiInteractionState | null\n  eventResize: EventSegUiInteractionState | null\n  singlePlacements: TableSegPlacement[]\n}\n\nconst DEFAULT_WEEK_NUM_FORMAT = createFormatter({ week: 'narrow' })\n\nexport class TableCell extends DateComponent<TableCellProps> {\n  private rootElRef = createRef<HTMLElement>()\n  state = {\n    dayNumberId: getUniqueDomId(),\n  }\n\n  render() {\n    let { context, props, state, rootElRef } = this\n    let { date, dateProfile } = props\n    let navLinkAttrs = buildNavLinkAttrs(context, date, 'week')\n\n    return (\n      <DayCellRoot\n        date={date}\n        dateProfile={dateProfile}\n        todayRange={props.todayRange}\n        showDayNumber={props.showDayNumber}\n        extraHookProps={props.extraHookProps}\n        elRef={this.handleRootEl}\n      >\n        {(dayElRef, dayClassNames, rootDataAttrs, isDisabled) => (\n          <td\n            ref={dayElRef}\n            role=\"gridcell\"\n            className={['fc-daygrid-day'].concat(dayClassNames, props.extraClassNames || []).join(' ')}\n            {...rootDataAttrs}\n            {...props.extraDataAttrs}\n            {...(props.showDayNumber ? { 'aria-labelledby': state.dayNumberId } : {})}\n          >\n            <div className=\"fc-daygrid-day-frame fc-scrollgrid-sync-inner\" ref={props.innerElRef /* different from hook system! RENAME */}>\n              {props.showWeekNumber && (\n                <WeekNumberRoot date={date} defaultFormat={DEFAULT_WEEK_NUM_FORMAT}>\n                  {(weekElRef, weekClassNames, innerElRef, innerContent) => (\n                    <a\n                      ref={weekElRef}\n                      className={['fc-daygrid-week-number'].concat(weekClassNames).join(' ')}\n                      {...navLinkAttrs}\n                    >\n                      {innerContent}\n                    </a>\n                  )}\n                </WeekNumberRoot>\n              )}\n              {!isDisabled && (\n                <TableCellTop\n                  date={date}\n                  dateProfile={dateProfile}\n                  showDayNumber={props.showDayNumber}\n                  dayNumberId={state.dayNumberId}\n                  forceDayTop={props.forceDayTop}\n                  todayRange={props.todayRange}\n                  extraHookProps={props.extraHookProps}\n                />\n              )}\n              <div\n                className=\"fc-daygrid-day-events\"\n                ref={props.fgContentElRef}\n              >\n                {props.fgContent}\n                <div className=\"fc-daygrid-day-bottom\" style={{ marginTop: props.moreMarginTop }}>\n                  <TableCellMoreLink\n                    allDayDate={date}\n                    singlePlacements={props.singlePlacements}\n                    moreCnt={props.moreCnt}\n                    alignmentElRef={rootElRef}\n                    alignGridTop={!props.showDayNumber}\n                    extraDateSpan={props.extraDateSpan}\n                    dateProfile={props.dateProfile}\n                    eventSelection={props.eventSelection}\n                    eventDrag={props.eventDrag}\n                    eventResize={props.eventResize}\n                    todayRange={props.todayRange}\n                  />\n                </div>\n              </div>\n              <div className=\"fc-daygrid-day-bg\">\n                {props.bgContent}\n              </div>\n            </div>\n          </td>\n        )}\n      </DayCellRoot>\n    )\n  }\n\n  handleRootEl = (el: HTMLElement) => {\n    setRef(this.rootElRef, el)\n    setRef(this.props.elRef, el)\n  }\n}\n", "import {\n  SegHierarchy,\n  SegRect,\n  SegEntry,\n  SegInsertion,\n  buildEntryKey,\n  EventRenderRange,\n  intersectRanges,\n  addDays,\n  DayTableCell,\n  intersectSpans,\n} from '@fullcalendar/common'\nimport { TableSeg } from './TableSeg'\n\nexport interface TableSegPlacement {\n  seg: TableSeg\n  isVisible: boolean\n  isAbsolute: boolean\n  absoluteTop: number // populated regardless of isAbsolute\n  marginTop: number\n}\n\nexport function computeFgSegPlacement(\n  segs: TableSeg[], // assumed already sorted\n  dayMaxEvents: boolean | number,\n  dayMaxEventRows: boolean | number,\n  strictOrder: boolean,\n  eventInstanceHeights: { [instanceId: string]: number },\n  maxContentHeight: number | null,\n  cells: DayTableCell[],\n) {\n  let hierarchy = new DayGridSegHierarchy()\n  hierarchy.allowReslicing = true\n  hierarchy.strictOrder = strictOrder\n\n  if (dayMaxEvents === true || dayMaxEventRows === true) {\n    hierarchy.maxCoord = maxContentHeight\n    hierarchy.hiddenConsumes = true\n  } else if (typeof dayMaxEvents === 'number') {\n    hierarchy.maxStackCnt = dayMaxEvents\n  } else if (typeof dayMaxEventRows === 'number') {\n    hierarchy.maxStackCnt = dayMaxEventRows\n    hierarchy.hiddenConsumes = true\n  }\n\n  // create segInputs only for segs with known heights\n  let segInputs: SegEntry[] = []\n  let unknownHeightSegs: TableSeg[] = []\n  for (let i = 0; i < segs.length; i += 1) {\n    let seg = segs[i]\n    let { instanceId } = seg.eventRange.instance\n    let eventHeight = eventInstanceHeights[instanceId]\n\n    if (eventHeight != null) {\n      segInputs.push({\n        index: i,\n        thickness: eventHeight,\n        span: {\n          start: seg.firstCol,\n          end: seg.lastCol + 1,\n        },\n      })\n    } else {\n      unknownHeightSegs.push(seg)\n    }\n  }\n\n  let hiddenEntries = hierarchy.addSegs(segInputs)\n  let segRects = hierarchy.toRects()\n  let { singleColPlacements, multiColPlacements, leftoverMargins } = placeRects(segRects, segs, cells)\n\n  let moreCnts: number[] = []\n  let moreMarginTops: number[] = []\n\n  // add segs with unknown heights\n  for (let seg of unknownHeightSegs) {\n    multiColPlacements[seg.firstCol].push({\n      seg,\n      isVisible: false,\n      isAbsolute: true,\n      absoluteTop: 0,\n      marginTop: 0,\n    })\n\n    for (let col = seg.firstCol; col <= seg.lastCol; col += 1) {\n      singleColPlacements[col].push({\n        seg: resliceSeg(seg, col, col + 1, cells),\n        isVisible: false,\n        isAbsolute: false,\n        absoluteTop: 0,\n        marginTop: 0,\n      })\n    }\n  }\n\n  // add the hidden entries\n  for (let col = 0; col < cells.length; col += 1) {\n    moreCnts.push(0)\n  }\n  for (let hiddenEntry of hiddenEntries) {\n    let seg = segs[hiddenEntry.index]\n    let hiddenSpan = hiddenEntry.span\n\n    multiColPlacements[hiddenSpan.start].push({\n      seg: resliceSeg(seg, hiddenSpan.start, hiddenSpan.end, cells),\n      isVisible: false,\n      isAbsolute: true,\n      absoluteTop: 0,\n      marginTop: 0,\n    })\n\n    for (let col = hiddenSpan.start; col < hiddenSpan.end; col += 1) {\n      moreCnts[col] += 1\n      singleColPlacements[col].push({\n        seg: resliceSeg(seg, col, col + 1, cells),\n        isVisible: false,\n        isAbsolute: false,\n        absoluteTop: 0,\n        marginTop: 0,\n      })\n    }\n  }\n\n  // deal with leftover margins\n  for (let col = 0; col < cells.length; col += 1) {\n    moreMarginTops.push(leftoverMargins[col])\n  }\n\n  return { singleColPlacements, multiColPlacements, moreCnts, moreMarginTops }\n}\n\n// rects ordered by top coord, then left\nfunction placeRects(allRects: SegRect[], segs: TableSeg[], cells: DayTableCell[]) {\n  let rectsByEachCol = groupRectsByEachCol(allRects, cells.length)\n  let singleColPlacements: TableSegPlacement[][] = []\n  let multiColPlacements: TableSegPlacement[][] = []\n  let leftoverMargins: number[] = []\n\n  for (let col = 0; col < cells.length; col += 1) {\n    let rects = rectsByEachCol[col]\n\n    // compute all static segs in singlePlacements\n    let singlePlacements: TableSegPlacement[] = []\n    let currentHeight = 0\n    let currentMarginTop = 0\n    for (let rect of rects) {\n      let seg = segs[rect.index]\n      singlePlacements.push({\n        seg: resliceSeg(seg, col, col + 1, cells),\n        isVisible: true,\n        isAbsolute: false,\n        absoluteTop: rect.levelCoord,\n        marginTop: rect.levelCoord - currentHeight,\n      })\n      currentHeight = rect.levelCoord + rect.thickness\n    }\n\n    // compute mixed static/absolute segs in multiPlacements\n    let multiPlacements: TableSegPlacement[] = []\n    currentHeight = 0\n    currentMarginTop = 0\n    for (let rect of rects) {\n      let seg = segs[rect.index]\n      let isAbsolute = rect.span.end - rect.span.start > 1 // multi-column?\n      let isFirstCol = rect.span.start === col\n\n      currentMarginTop += rect.levelCoord - currentHeight // amount of space since bottom of previous seg\n      currentHeight = rect.levelCoord + rect.thickness // height will now be bottom of current seg\n\n      if (isAbsolute) {\n        currentMarginTop += rect.thickness\n        if (isFirstCol) {\n          multiPlacements.push({\n            seg: resliceSeg(seg, rect.span.start, rect.span.end, cells),\n            isVisible: true,\n            isAbsolute: true,\n            absoluteTop: rect.levelCoord,\n            marginTop: 0,\n          })\n        }\n      } else if (isFirstCol) {\n        multiPlacements.push({\n          seg: resliceSeg(seg, rect.span.start, rect.span.end, cells),\n          isVisible: true,\n          isAbsolute: false,\n          absoluteTop: rect.levelCoord,\n          marginTop: currentMarginTop, // claim the margin\n        })\n        currentMarginTop = 0\n      }\n    }\n\n    singleColPlacements.push(singlePlacements)\n    multiColPlacements.push(multiPlacements)\n    leftoverMargins.push(currentMarginTop)\n  }\n\n  return { singleColPlacements, multiColPlacements, leftoverMargins }\n}\n\nfunction groupRectsByEachCol(rects: SegRect[], colCnt: number): SegRect[][] {\n  let rectsByEachCol: SegRect[][] = []\n\n  for (let col = 0; col < colCnt; col += 1) {\n    rectsByEachCol.push([])\n  }\n\n  for (let rect of rects) {\n    for (let col = rect.span.start; col < rect.span.end; col += 1) {\n      rectsByEachCol[col].push(rect)\n    }\n  }\n\n  return rectsByEachCol\n}\n\nfunction resliceSeg(seg: TableSeg, spanStart: number, spanEnd: number, cells: DayTableCell[]): TableSeg {\n  if (seg.firstCol === spanStart && seg.lastCol === spanEnd - 1) {\n    return seg\n  }\n\n  let eventRange = seg.eventRange\n  let origRange = eventRange.range\n  let slicedRange = intersectRanges(origRange, {\n    start: cells[spanStart].date,\n    end: addDays(cells[spanEnd - 1].date, 1),\n  })\n\n  return {\n    ...seg,\n    firstCol: spanStart,\n    lastCol: spanEnd - 1,\n    eventRange: {\n      def: eventRange.def,\n      ui: { ...eventRange.ui, durationEditable: false }, // hack to disable resizing\n      instance: eventRange.instance,\n      range: slicedRange,\n    } as EventRenderRange,\n    isStart: seg.isStart && slicedRange.start.valueOf() === origRange.start.valueOf(),\n    isEnd: seg.isEnd && slicedRange.end.valueOf() === origRange.end.valueOf(),\n  }\n}\n\nclass DayGridSegHierarchy extends SegHierarchy {\n  // config\n  hiddenConsumes: boolean = false\n\n  // allows us to keep hidden entries in the hierarchy so they take up space\n  forceHidden: { [entryId: string]: true } = {}\n\n  addSegs(segInputs: SegEntry[]): SegEntry[] {\n    const hiddenSegs = super.addSegs(segInputs)\n    const { entriesByLevel } = this\n    const excludeHidden = (entry: SegEntry) => !this.forceHidden[buildEntryKey(entry)]\n\n    // remove the forced-hidden segs\n    for (let level = 0; level < entriesByLevel.length; level += 1) {\n      entriesByLevel[level] = entriesByLevel[level].filter(excludeHidden)\n    }\n\n    return hiddenSegs\n  }\n\n  handleInvalidInsertion(insertion: SegInsertion, entry: SegEntry, hiddenEntries: SegEntry[]) {\n    const { entriesByLevel, forceHidden } = this\n    const { touchingEntry, touchingLevel, touchingLateral } = insertion\n\n    if (this.hiddenConsumes && touchingEntry) {\n      const touchingEntryId = buildEntryKey(touchingEntry)\n      // if not already hidden\n      if (!forceHidden[touchingEntryId]) {\n        if (this.allowReslicing) {\n          const placeholderEntry: SegEntry = { // placeholder of the \"more\" link\n            ...touchingEntry,\n            span: intersectSpans(touchingEntry.span, entry.span),\n          }\n          const placeholderEntryId = buildEntryKey(placeholderEntry)\n          forceHidden[placeholderEntryId] = true\n          entriesByLevel[touchingLevel][touchingLateral] = placeholderEntry // replace touchingEntry with our placeholder\n          this.splitEntry(touchingEntry, entry, hiddenEntries) // split up the touchingEntry, reinsert it\n        } else {\n          forceHidden[touchingEntryId] = true\n          hiddenEntries.push(touchingEntry)\n        }\n      }\n    }\n\n    return super.handleInvalidInsertion(insertion, entry, hiddenEntries)\n  }\n}\n", "import {\n  EventSegUiInteractionState,\n  VNode,\n  DateComponent,\n  createElement,\n  PositionCache,\n  RefMap,\n  CssDimValue,\n  DateRange,\n  getSegMeta,\n  DateProfile,\n  Fragment,\n  BgEvent,\n  renderFill,\n  isPropsEqual,\n  createRef,\n  buildEventRangeKey,\n  sortEventSegs,\n  DayTableCell,\n} from '@fullcalendar/common'\nimport { TableSeg, splitSegsByFirstCol } from './TableSeg'\nimport { TableCell } from './TableCell'\nimport { TableListItemEvent } from './TableListItemEvent'\nimport { TableBlockEvent } from './TableBlockEvent'\nimport { computeFgSegPlacement, TableSegPlacement } from './event-placement'\nimport { hasListItemDisplay } from './event-rendering'\n\n// TODO: attach to window resize?\n\nexport interface TableRowProps {\n  cells: DayTableCell[]\n  renderIntro?: () => VNode\n  businessHourSegs: TableSeg[]\n  bgEventSegs: TableSeg[]\n  fgEventSegs: TableSeg[]\n  dateSelectionSegs: TableSeg[]\n  eventSelection: string\n  eventDrag: EventSegUiInteractionState | null\n  eventResize: EventSegUiInteractionState | null\n  dayMaxEvents: boolean | number\n  dayMaxEventRows: boolean | number\n  clientWidth: number | null\n  clientHeight: number | null // simply for causing an updateSize, for when liquid height\n  dateProfile: DateProfile\n  todayRange: DateRange\n  showDayNumbers: boolean\n  showWeekNumbers: boolean\n  forPrint: boolean\n}\n\ninterface TableRowState {\n  framePositions: PositionCache\n  maxContentHeight: number | null\n  eventInstanceHeights: { [instanceId: string]: number } // integers\n}\n\nexport class TableRow extends DateComponent<TableRowProps, TableRowState> {\n  private cellElRefs = new RefMap<HTMLTableCellElement>() // the <td>\n  private frameElRefs = new RefMap<HTMLElement>() // the fc-daygrid-day-frame\n  private fgElRefs = new RefMap<HTMLDivElement>() // the fc-daygrid-day-events\n  private segHarnessRefs = new RefMap<HTMLDivElement>() // indexed by \"instanceId:firstCol\"\n  private rootElRef = createRef<HTMLTableRowElement>()\n\n  state: TableRowState = {\n    framePositions: null,\n    maxContentHeight: null,\n    eventInstanceHeights: {},\n  }\n\n  render() {\n    let { props, state, context } = this\n    let { options } = context\n    let colCnt = props.cells.length\n\n    let businessHoursByCol = splitSegsByFirstCol(props.businessHourSegs, colCnt)\n    let bgEventSegsByCol = splitSegsByFirstCol(props.bgEventSegs, colCnt)\n    let highlightSegsByCol = splitSegsByFirstCol(this.getHighlightSegs(), colCnt)\n    let mirrorSegsByCol = splitSegsByFirstCol(this.getMirrorSegs(), colCnt)\n\n    let { singleColPlacements, multiColPlacements, moreCnts, moreMarginTops } = computeFgSegPlacement(\n      sortEventSegs(props.fgEventSegs, options.eventOrder) as TableSeg[],\n      props.dayMaxEvents,\n      props.dayMaxEventRows,\n      options.eventOrderStrict,\n      state.eventInstanceHeights,\n      state.maxContentHeight,\n      props.cells,\n    )\n\n    let isForcedInvisible = // TODO: messy way to compute this\n      (props.eventDrag && props.eventDrag.affectedInstances) ||\n      (props.eventResize && props.eventResize.affectedInstances) ||\n      {}\n\n    return (\n      <tr ref={this.rootElRef} role=\"row\">\n        {props.renderIntro && props.renderIntro()}\n        {props.cells.map((cell, col) => {\n          let normalFgNodes = this.renderFgSegs(\n            col,\n            props.forPrint ? singleColPlacements[col] : multiColPlacements[col],\n            props.todayRange,\n            isForcedInvisible,\n          )\n\n          let mirrorFgNodes = this.renderFgSegs(\n            col,\n            buildMirrorPlacements(mirrorSegsByCol[col], multiColPlacements),\n            props.todayRange,\n            {},\n            Boolean(props.eventDrag),\n            Boolean(props.eventResize),\n            false, // date-selecting (because mirror is never drawn for date selection)\n          )\n\n          return (\n            <TableCell\n              key={cell.key}\n              elRef={this.cellElRefs.createRef(cell.key)}\n              innerElRef={this.frameElRefs.createRef(cell.key) /* FF <td> problem, but okay to use for left/right. TODO: rename prop */}\n              dateProfile={props.dateProfile}\n              date={cell.date}\n              showDayNumber={props.showDayNumbers}\n              showWeekNumber={props.showWeekNumbers && col === 0}\n              forceDayTop={props.showWeekNumbers /* even displaying weeknum for row, not necessarily day */}\n              todayRange={props.todayRange}\n              eventSelection={props.eventSelection}\n              eventDrag={props.eventDrag}\n              eventResize={props.eventResize}\n              extraHookProps={cell.extraHookProps}\n              extraDataAttrs={cell.extraDataAttrs}\n              extraClassNames={cell.extraClassNames}\n              extraDateSpan={cell.extraDateSpan}\n              moreCnt={moreCnts[col]}\n              moreMarginTop={moreMarginTops[col]}\n              singlePlacements={singleColPlacements[col]}\n              fgContentElRef={this.fgElRefs.createRef(cell.key)}\n              fgContent={( // Fragment scopes the keys\n                <Fragment>\n                  <Fragment>{normalFgNodes}</Fragment>\n                  <Fragment>{mirrorFgNodes}</Fragment>\n                </Fragment>\n              )}\n              bgContent={( // Fragment scopes the keys\n                <Fragment>\n                  {this.renderFillSegs(highlightSegsByCol[col], 'highlight')}\n                  {this.renderFillSegs(businessHoursByCol[col], 'non-business')}\n                  {this.renderFillSegs(bgEventSegsByCol[col], 'bg-event')}\n                </Fragment>\n              )}\n            />\n          )\n        })}\n      </tr>\n    )\n  }\n\n  componentDidMount() {\n    this.updateSizing(true)\n  }\n\n  componentDidUpdate(prevProps: TableRowProps, prevState: TableRowState) {\n    let currentProps = this.props\n\n    this.updateSizing(\n      !isPropsEqual(prevProps, currentProps),\n    )\n  }\n\n  getHighlightSegs(): TableSeg[] {\n    let { props } = this\n\n    if (props.eventDrag && props.eventDrag.segs.length) { // messy check\n      return props.eventDrag.segs as TableSeg[]\n    }\n\n    if (props.eventResize && props.eventResize.segs.length) { // messy check\n      return props.eventResize.segs as TableSeg[]\n    }\n\n    return props.dateSelectionSegs\n  }\n\n  getMirrorSegs(): TableSeg[] {\n    let { props } = this\n\n    if (props.eventResize && props.eventResize.segs.length) { // messy check\n      return props.eventResize.segs as TableSeg[]\n    }\n\n    return []\n  }\n\n  renderFgSegs(\n    col: number,\n    segPlacements: TableSegPlacement[],\n    todayRange: DateRange,\n    isForcedInvisible: { [instanceId: string]: any },\n    isDragging?: boolean,\n    isResizing?: boolean,\n    isDateSelecting?: boolean,\n  ): VNode[] {\n    let { context } = this\n    let { eventSelection } = this.props\n    let { framePositions } = this.state\n    let defaultDisplayEventEnd = this.props.cells.length === 1 // colCnt === 1\n    let isMirror = isDragging || isResizing || isDateSelecting\n    let nodes: VNode[] = []\n\n    if (framePositions) {\n      for (let placement of segPlacements) {\n        let { seg } = placement\n        let { instanceId } = seg.eventRange.instance\n        let key = instanceId + ':' + col\n        let isVisible = placement.isVisible && !isForcedInvisible[instanceId]\n        let isAbsolute = placement.isAbsolute\n        let left: CssDimValue = ''\n        let right: CssDimValue = ''\n\n        if (isAbsolute) {\n          if (context.isRtl) {\n            right = 0\n            left = framePositions.lefts[seg.lastCol] - framePositions.lefts[seg.firstCol]\n          } else {\n            left = 0\n            right = framePositions.rights[seg.firstCol] - framePositions.rights[seg.lastCol]\n          }\n        }\n\n        /*\n        known bug: events that are force to be list-item but span multiple days still take up space in later columns\n        todo: in print view, for multi-day events, don't display title within non-start/end segs\n        */\n        nodes.push(\n          <div\n            className={'fc-daygrid-event-harness' + (isAbsolute ? ' fc-daygrid-event-harness-abs' : '')}\n            key={key}\n            ref={isMirror ? null : this.segHarnessRefs.createRef(key)}\n            style={{\n              visibility: isVisible ? ('' as any) : 'hidden',\n              marginTop: isAbsolute ? '' : placement.marginTop,\n              top: isAbsolute ? placement.absoluteTop : '',\n              left,\n              right,\n            }}\n          >\n            {hasListItemDisplay(seg) ? (\n              <TableListItemEvent\n                seg={seg}\n                isDragging={isDragging}\n                isSelected={instanceId === eventSelection}\n                defaultDisplayEventEnd={defaultDisplayEventEnd}\n                {...getSegMeta(seg, todayRange)}\n              />\n            ) : (\n              <TableBlockEvent\n                seg={seg}\n                isDragging={isDragging}\n                isResizing={isResizing}\n                isDateSelecting={isDateSelecting}\n                isSelected={instanceId === eventSelection}\n                defaultDisplayEventEnd={defaultDisplayEventEnd}\n                {...getSegMeta(seg, todayRange)}\n              />\n            )}\n          </div>,\n        )\n      }\n    }\n\n    return nodes\n  }\n\n  renderFillSegs(segs: TableSeg[], fillType: string): VNode {\n    let { isRtl } = this.context\n    let { todayRange } = this.props\n    let { framePositions } = this.state\n    let nodes: VNode[] = []\n\n    if (framePositions) {\n      for (let seg of segs) {\n        let leftRightCss = isRtl ? {\n          right: 0,\n          left: framePositions.lefts[seg.lastCol] - framePositions.lefts[seg.firstCol],\n        } : {\n          left: 0,\n          right: framePositions.rights[seg.firstCol] - framePositions.rights[seg.lastCol],\n        }\n\n        nodes.push(\n          <div\n            key={buildEventRangeKey(seg.eventRange)}\n            className=\"fc-daygrid-bg-harness\"\n            style={leftRightCss}\n          >\n            {fillType === 'bg-event' ?\n              <BgEvent seg={seg} {...getSegMeta(seg, todayRange)} /> :\n              renderFill(fillType)}\n          </div>,\n        )\n      }\n    }\n\n    return createElement(Fragment, {}, ...nodes)\n  }\n\n  updateSizing(isExternalSizingChange) {\n    let { props, frameElRefs } = this\n\n    if (\n      !props.forPrint &&\n      props.clientWidth !== null // positioning ready?\n    ) {\n      if (isExternalSizingChange) {\n        let frameEls = props.cells.map((cell) => frameElRefs.currentMap[cell.key])\n\n        if (frameEls.length) {\n          let originEl = this.rootElRef.current\n\n          this.setState({ // will trigger isCellPositionsChanged...\n            framePositions: new PositionCache(\n              originEl,\n              frameEls,\n              true, // isHorizontal\n              false,\n            ),\n          })\n        }\n      }\n\n      const oldInstanceHeights = this.state.eventInstanceHeights\n      const newInstanceHeights = this.queryEventInstanceHeights()\n      const limitByContentHeight = props.dayMaxEvents === true || props.dayMaxEventRows === true\n\n      this.safeSetState({\n        // HACK to prevent oscillations of events being shown/hidden from max-event-rows\n        // Essentially, once you compute an element's height, never null-out.\n        // TODO: always display all events, as visibility:hidden?\n        eventInstanceHeights: { ...oldInstanceHeights, ...newInstanceHeights },\n\n        maxContentHeight: limitByContentHeight ? this.computeMaxContentHeight() : null,\n      })\n    }\n  }\n\n  queryEventInstanceHeights() {\n    let segElMap = this.segHarnessRefs.currentMap\n    let eventInstanceHeights: { [key: string]: number } = {}\n\n    // get the max height amongst instance segs\n    for (let key in segElMap) {\n      let height = Math.round(segElMap[key].getBoundingClientRect().height)\n      let instanceId = key.split(':')[0] // deconstruct how renderFgSegs makes the key\n      eventInstanceHeights[instanceId] = Math.max(eventInstanceHeights[instanceId] || 0, height)\n    }\n\n    return eventInstanceHeights\n  }\n\n  computeMaxContentHeight() {\n    let firstKey = this.props.cells[0].key\n    let cellEl = this.cellElRefs.currentMap[firstKey]\n    let fcContainerEl = this.fgElRefs.currentMap[firstKey]\n\n    return cellEl.getBoundingClientRect().bottom - fcContainerEl.getBoundingClientRect().top\n  }\n\n  public getCellEls() {\n    let elMap = this.cellElRefs.currentMap\n\n    return this.props.cells.map((cell) => elMap[cell.key])\n  }\n}\n\nTableRow.addStateEquality({\n  eventInstanceHeights: isPropsEqual,\n})\n\nfunction buildMirrorPlacements(mirrorSegs: TableSeg[], colPlacements: TableSegPlacement[][]): TableSegPlacement[] {\n  if (!mirrorSegs.length) {\n    return []\n  }\n  let topsByInstanceId = buildAbsoluteTopHash(colPlacements) // TODO: cache this at first render?\n  return mirrorSegs.map((seg: TableSeg) => ({\n    seg,\n    isVisible: true,\n    isAbsolute: true,\n    absoluteTop: topsByInstanceId[seg.eventRange.instance.instanceId],\n    marginTop: 0,\n  }))\n}\n\nfunction buildAbsoluteTopHash(colPlacements: TableSegPlacement[][]): { [instanceId: string]: number } {\n  let topsByInstanceId: { [instanceId: string]: number } = {}\n\n  for (let placements of colPlacements) {\n    for (let placement of placements) {\n      topsByInstanceId[placement.seg.eventRange.instance.instanceId] = placement.absoluteTop\n    }\n  }\n\n  return topsByInstanceId\n}\n", "import {\n  EventSegUiInteractionState,\n  VNode,\n  DateComponent,\n  RefObject,\n  CssDimValue,\n  createElement,\n  PositionCache,\n  memoize,\n  addDays,\n  RefMap,\n  DateRange,\n  NowTimer,\n  DateMarker,\n  DateProfile,\n  Fragment,\n  Hit,\n  DayTableCell,\n} from '@fullcalendar/common'\nimport { TableSeg, splitSegsByRow, splitInteractionByRow } from './TableSeg'\nimport { TableRow } from './TableRow'\n\nexport interface TableProps {\n  dateProfile: DateProfile\n  cells: DayTableCell[][] // cells-BY-ROW\n  renderRowIntro?: () => VNode\n  colGroupNode: VNode\n  tableMinWidth: CssDimValue\n  expandRows: boolean\n  showWeekNumbers: boolean\n  clientWidth: number | null\n  clientHeight: number | null\n  businessHourSegs: TableSeg[]\n  bgEventSegs: TableSeg[]\n  fgEventSegs: TableSeg[]\n  dateSelectionSegs: TableSeg[]\n  eventSelection: string\n  eventDrag: EventSegUiInteractionState | null\n  eventResize: EventSegUiInteractionState | null\n  dayMaxEvents: boolean | number\n  dayMaxEventRows: boolean | number\n  headerAlignElRef?: RefObject<HTMLElement>\n  forPrint: boolean\n  isHitComboAllowed?: (hit0: Hit, hit1: Hit) => boolean\n}\n\nexport class Table extends DateComponent<TableProps> {\n  private splitBusinessHourSegs = memoize(splitSegsByRow)\n  private splitBgEventSegs = memoize(splitSegsByRow)\n  private splitFgEventSegs = memoize(splitSegsByRow)\n  private splitDateSelectionSegs = memoize(splitSegsByRow)\n  private splitEventDrag = memoize(splitInteractionByRow)\n  private splitEventResize = memoize(splitInteractionByRow)\n  private rootEl: HTMLElement\n  private rowRefs = new RefMap<TableRow>()\n  private rowPositions: PositionCache\n  private colPositions: PositionCache\n\n  render() {\n    let { props } = this\n    let { dateProfile, dayMaxEventRows, dayMaxEvents, expandRows } = props\n    let rowCnt = props.cells.length\n\n    let businessHourSegsByRow = this.splitBusinessHourSegs(props.businessHourSegs, rowCnt)\n    let bgEventSegsByRow = this.splitBgEventSegs(props.bgEventSegs, rowCnt)\n    let fgEventSegsByRow = this.splitFgEventSegs(props.fgEventSegs, rowCnt)\n    let dateSelectionSegsByRow = this.splitDateSelectionSegs(props.dateSelectionSegs, rowCnt)\n    let eventDragByRow = this.splitEventDrag(props.eventDrag, rowCnt)\n    let eventResizeByRow = this.splitEventResize(props.eventResize, rowCnt)\n\n    let limitViaBalanced = dayMaxEvents === true || dayMaxEventRows === true\n\n    // if rows can't expand to fill fixed height, can't do balanced-height event limit\n    // TODO: best place to normalize these options?\n    if (limitViaBalanced && !expandRows) {\n      limitViaBalanced = false\n      dayMaxEventRows = null\n      dayMaxEvents = null\n    }\n\n    let classNames = [\n      'fc-daygrid-body',\n      limitViaBalanced ? 'fc-daygrid-body-balanced' : 'fc-daygrid-body-unbalanced', // will all row heights be equal?\n      expandRows ? '' : 'fc-daygrid-body-natural', // will height of one row depend on the others?\n    ]\n\n    return (\n      <div\n        className={classNames.join(' ')}\n        ref={this.handleRootEl}\n        style={{\n          // these props are important to give this wrapper correct dimensions for interactions\n          // TODO: if we set it here, can we avoid giving to inner tables?\n          width: props.clientWidth,\n          minWidth: props.tableMinWidth,\n        }}\n      >\n        <NowTimer unit=\"day\">\n          {(nowDate: DateMarker, todayRange: DateRange) => (\n            <Fragment>\n              <table\n                role=\"presentation\"\n                className=\"fc-scrollgrid-sync-table\"\n                style={{\n                  width: props.clientWidth,\n                  minWidth: props.tableMinWidth,\n                  height: expandRows ? props.clientHeight : '',\n                }}\n              >\n                {props.colGroupNode}\n                <tbody role=\"presentation\">\n                  {props.cells.map((cells, row) => (\n                    <TableRow\n                      ref={this.rowRefs.createRef(row)}\n                      key={\n                        cells.length\n                          ? cells[0].date.toISOString() /* best? or put key on cell? or use diff formatter? */\n                          : row // in case there are no cells (like when resource view is loading)\n                      }\n                      showDayNumbers={rowCnt > 1}\n                      showWeekNumbers={props.showWeekNumbers}\n                      todayRange={todayRange}\n                      dateProfile={dateProfile}\n                      cells={cells}\n                      renderIntro={props.renderRowIntro}\n                      businessHourSegs={businessHourSegsByRow[row]}\n                      eventSelection={props.eventSelection}\n                      bgEventSegs={bgEventSegsByRow[row].filter(isSegAllDay) /* hack */}\n                      fgEventSegs={fgEventSegsByRow[row]}\n                      dateSelectionSegs={dateSelectionSegsByRow[row]}\n                      eventDrag={eventDragByRow[row]}\n                      eventResize={eventResizeByRow[row]}\n                      dayMaxEvents={dayMaxEvents}\n                      dayMaxEventRows={dayMaxEventRows}\n                      clientWidth={props.clientWidth}\n                      clientHeight={props.clientHeight}\n                      forPrint={props.forPrint}\n                    />\n                  ))}\n                </tbody>\n              </table>\n            </Fragment>\n          )}\n        </NowTimer>\n      </div>\n    )\n  }\n\n  handleRootEl = (rootEl: HTMLElement | null) => {\n    this.rootEl = rootEl\n\n    if (rootEl) {\n      this.context.registerInteractiveComponent(this, {\n        el: rootEl,\n        isHitComboAllowed: this.props.isHitComboAllowed,\n      })\n    } else {\n      this.context.unregisterInteractiveComponent(this)\n    }\n  }\n\n  // Hit System\n  // ----------------------------------------------------------------------------------------------------\n\n  prepareHits() {\n    this.rowPositions = new PositionCache(\n      this.rootEl,\n      this.rowRefs.collect().map((rowObj) => rowObj.getCellEls()[0]), // first cell el in each row. TODO: not optimal\n      false,\n      true, // vertical\n    )\n\n    this.colPositions = new PositionCache(\n      this.rootEl,\n      this.rowRefs.currentMap[0].getCellEls(), // cell els in first row\n      true, // horizontal\n      false,\n    )\n  }\n\n  queryHit(positionLeft: number, positionTop: number): Hit {\n    let { colPositions, rowPositions } = this\n    let col = colPositions.leftToIndex(positionLeft)\n    let row = rowPositions.topToIndex(positionTop)\n\n    if (row != null && col != null) {\n      let cell = this.props.cells[row][col]\n\n      return {\n        dateProfile: this.props.dateProfile,\n        dateSpan: {\n          range: this.getCellRange(row, col),\n          allDay: true,\n          ...cell.extraDateSpan,\n        },\n        dayEl: this.getCellEl(row, col),\n        rect: {\n          left: colPositions.lefts[col],\n          right: colPositions.rights[col],\n          top: rowPositions.tops[row],\n          bottom: rowPositions.bottoms[row],\n        },\n        layer: 0,\n      }\n    }\n\n    return null\n  }\n\n  private getCellEl(row, col) {\n    return this.rowRefs.currentMap[row].getCellEls()[col] // TODO: not optimal\n  }\n\n  private getCellRange(row, col) {\n    let start = this.props.cells[row][col].date\n    let end = addDays(start, 1)\n    return { start, end }\n  }\n}\n\nfunction isSegAllDay(seg: TableSeg) {\n  return seg.eventRange.def.allDay\n}\n", "import { DayTableModel, DateRange, Slicer } from '@fullcalendar/common'\nimport { TableSeg } from './TableSeg'\n\nexport class DayTableSlicer extends Slicer<TableSeg, [DayTableModel]> {\n  forceDayIfListItem = true\n\n  sliceRange(dateRange: DateRange, dayTableModel: DayTableModel): TableSeg[] {\n    return dayTableModel.sliceRange(dateRange)\n  }\n}\n", "import {\n  createElement, createRef, VNode,\n  EventStore,\n  EventUiHash,\n  DateSpan,\n  EventInteractionState,\n  DayTableModel,\n  Duration,\n  DateComponent,\n  ViewContext,\n  RefObject,\n  CssDimValue,\n  DateProfile,\n} from '@fullcalendar/common'\nimport { Table } from './Table'\nimport { DayTableSlicer } from './DayTableSlicer'\n\nexport interface DayTableProps {\n  dateProfile: DateProfile,\n  dayTableModel: DayTableModel\n  nextDayThreshold: Duration\n  businessHours: EventStore\n  eventStore: EventStore\n  eventUiBases: EventUiHash\n  dateSelection: DateSpan | null\n  eventSelection: string\n  eventDrag: EventInteractionState | null\n  eventResize: EventInteractionState | null\n  colGroupNode: VNode\n  tableMinWidth: CssDimValue\n  renderRowIntro?: () => VNode\n  dayMaxEvents: boolean | number\n  dayMaxEventRows: boolean | number\n  expandRows: boolean\n  showWeekNumbers: boolean\n  headerAlignElRef?: RefObject<HTMLElement> // for more popover alignment\n  clientWidth: number | null\n  clientHeight: number | null\n  forPrint: boolean\n}\n\nexport class DayTable extends DateComponent<DayTableProps, ViewContext> {\n  private slicer = new DayTableSlicer()\n  private tableRef = createRef<Table>()\n\n  render() {\n    let { props, context } = this\n\n    return (\n      <Table\n        ref={this.tableRef}\n        {...this.slicer.sliceProps(props, props.dateProfile, props.nextDayThreshold, context, props.dayTableModel)}\n        dateProfile={props.dateProfile}\n        cells={props.dayTableModel.cells}\n        colGroupNode={props.colGroupNode}\n        tableMinWidth={props.tableMinWidth}\n        renderRowIntro={props.renderRowIntro}\n        dayMaxEvents={props.dayMaxEvents}\n        dayMaxEventRows={props.dayMaxEventRows}\n        showWeekNumbers={props.showWeekNumbers}\n        expandRows={props.expandRows}\n        headerAlignElRef={props.headerAlignElRef}\n        clientWidth={props.clientWidth}\n        clientHeight={props.clientHeight}\n        forPrint={props.forPrint}\n      />\n    )\n  }\n}\n", "import {\n  createElement, createRef,\n  DayHeader,\n  DateProfileGenerator,\n  DateProfile,\n  memoize,\n  DaySeriesModel,\n  DayTableModel,\n  ChunkContentCallbackArgs,\n} from '@fullcalendar/common'\nimport { TableView } from './TableView'\nimport { DayTable } from './DayTable'\n\nexport class DayTableView extends TableView {\n  private buildDayTableModel = memoize(buildDayTableModel)\n  private headerRef = createRef<DayHeader>()\n  private tableRef = createRef<DayTable>()\n\n  render() {\n    let { options, dateProfileGenerator } = this.context\n    let { props } = this\n    let dayTableModel = this.buildDayTableModel(props.dateProfile, dateProfileGenerator)\n\n    let headerContent = options.dayHeaders && (\n      <DayHeader\n        ref={this.headerRef}\n        dateProfile={props.dateProfile}\n        dates={dayTableModel.headerDates}\n        datesRepDistinctDays={dayTableModel.rowCnt === 1}\n      />\n    )\n\n    let bodyContent = (contentArg: ChunkContentCallbackArgs) => (\n      <DayTable\n        ref={this.tableRef}\n        dateProfile={props.dateProfile}\n        dayTableModel={dayTableModel}\n        businessHours={props.businessHours}\n        dateSelection={props.dateSelection}\n        eventStore={props.eventStore}\n        eventUiBases={props.eventUiBases}\n        eventSelection={props.eventSelection}\n        eventDrag={props.eventDrag}\n        eventResize={props.eventResize}\n        nextDayThreshold={options.nextDayThreshold}\n        colGroupNode={contentArg.tableColGroupNode}\n        tableMinWidth={contentArg.tableMinWidth}\n        dayMaxEvents={options.dayMaxEvents}\n        dayMaxEventRows={options.dayMaxEventRows}\n        showWeekNumbers={options.weekNumbers}\n        expandRows={!props.isHeightAuto}\n        headerAlignElRef={this.headerElRef}\n        clientWidth={contentArg.clientWidth}\n        clientHeight={contentArg.clientHeight}\n        forPrint={props.forPrint}\n      />\n    )\n\n    return options.dayMinWidth\n      ? this.renderHScrollLayout(headerContent, bodyContent, dayTableModel.colCnt, options.dayMinWidth)\n      : this.renderSimpleLayout(headerContent, bodyContent)\n  }\n}\n\nexport function buildDayTableModel(dateProfile: DateProfile, dateProfileGenerator: DateProfileGenerator) {\n  let daySeries = new DaySeriesModel(dateProfile.renderRange, dateProfileGenerator)\n\n  return new DayTableModel(\n    daySeries,\n    /year|month|week/.test(dateProfile.currentRangeUnit),\n  )\n}\n", "import {\n  DateProfileGenerator,\n  addWeeks, diffWeeks,\n  DateRange,\n} from '@fullcalendar/common'\n\nexport class TableDateProfileGenerator extends DateProfileGenerator {\n  // Computes the date range that will be rendered.\n  buildRenderRange(currentRange, currentRangeUnit, isRangeAllDay): DateRange {\n    let { dateEnv } = this.props\n    let renderRange = super.buildRenderRange(currentRange, currentRangeUnit, isRangeAllDay)\n    let start = renderRange.start\n    let end = renderRange.end\n    let endOfWeek\n\n    // year and month views should be aligned with weeks. this is already done for week\n    if (/^(year|month)$/.test(currentRangeUnit)) {\n      start = dateEnv.startOfWeek(start)\n\n      // make end-of-week if not already\n      endOfWeek = dateEnv.startOfWeek(end)\n      if (endOfWeek.valueOf() !== end.valueOf()) {\n        end = addWeeks(endOfWeek, 1)\n      }\n    }\n\n    // ensure 6 weeks\n    if (\n      this.props.monthMode &&\n      this.props.fixedWeekCount\n    ) {\n      let rowCnt = Math.ceil( // could be partial weeks due to hiddenDays\n        diffWeeks(start, end),\n      )\n      end = addWeeks(end, 6 - rowCnt)\n    }\n\n    return { start, end }\n  }\n}\n", "import { createPlugin } from '@fullcalendar/common'\nimport { DayTableView } from './DayTableView'\nimport { TableDateProfileGenerator } from './TableDateProfileGenerator'\nimport './main.css'\n\nexport { DayTable } from './DayTable'\nexport { DayTableSlicer } from './DayTableSlicer'\nexport { Table } from './Table'\nexport { TableSeg } from './TableSeg'\nexport { TableView } from './TableView'\nexport { buildDayTableModel } from './DayTableView'\nexport { DayTableView as DayGridView } // export as old name!\n\nexport default createPlugin({\n  initialView: 'dayGridMonth',\n  views: {\n\n    dayGrid: {\n      component: DayTableView,\n      dateProfileGeneratorClass: TableDateProfileGenerator,\n    },\n\n    dayGridDay: {\n      type: 'dayGrid',\n      duration: { days: 1 },\n    },\n\n    dayGridWeek: {\n      type: 'dayGrid',\n      duration: { weeks: 1 },\n    },\n\n    dayGridMonth: {\n      type: 'dayGrid',\n      duration: { months: 1 },\n      monthMode: true,\n      fixedWeekCount: true,\n    },\n\n  },\n})\n"],
  "mappings": "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",
  "names": ["TableView", "TableCellTop", "TableBlockEvent", "TableListItemEvent", "TableCellMoreLink", "TableCell", "DayGridSegHierarchy", "TableRow", "Table", "DayTableSlicer", "DayTable", "DayTableView", "TableDateProfileGenerator"]
}
